{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","path":"lib/vazir-font/Vazir-Regular.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","path":"lib/vazir-font/Vazir-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","path":"lib/vazir-font/Vazir-Regular.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","path":"lib/vazir-font/Vazir-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","path":"lib/vazir-font/Vazir-Variable.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","path":"lib/vazir-font/Vazir-Variable.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","path":"lib/vazir-font/Vazir-Variable.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","path":"lib/vazir-font/Vazir-Variable.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","path":"lib/font-awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","path":"lib/font-awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1654370482194},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1654370494864},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1654370510405},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1654370514607},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1654370510356},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1654370514697},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1654370514714},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1654370514755},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1654370514785},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1654370514830},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1654370514857},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1654370514882},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1654370514965},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1654370515022},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1654370514927},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1654370515010},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1654370515078},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1654370514943},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1654370514988},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1654370501930},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1654370502861},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1654370504151},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1654370515125},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1654370515090},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1654370504642},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1654370504237},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1654370504750},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1654370502690},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1654370509354},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1654370501286},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1654370505518},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1654370504988},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1654370505718},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1654370505616},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1654370499165},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1654370502094},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1654370500222},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1654370503434},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1654370503159},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1654370503640},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1654370499953},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1654370503892},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1654370504413},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1654370504000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1654370511308},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1654370505248},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1654370510300},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1654370512316},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1654370496630},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1654370503338},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1654370511338},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1654370504488},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1654370505404},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1654370511908},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1654370503034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1654370502505},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1654370512065},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1654370505809},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1654370511735},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1654370511727},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1654370511608},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1654370511954},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1654370511533},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1654370512016},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1654370512254},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1654370512150},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1654370512109},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1654370512203},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1654370509838},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1654370510189},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1654370514344},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1654370514565},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1654370507529},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1654370511100},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1654370514111},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1654370509222},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1654370513534},{"_id":"themes/cactus/.gitignore","hash":"72267ee409a324fc197c150b3c4bf28b87b709a8","modified":1655497172208},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1655497172214},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1655497172218},{"_id":"themes/cactus/README.md","hash":"778ff0b9caf666d2c0dc3413e26ffb862f354173","modified":1655497172229},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1655497172224},{"_id":"themes/cactus/_config.yml","hash":"b01039592b8ddef0a5da1dc16cf1b30ba2a9f809","modified":1655504549343},{"_id":"themes/cactus/gulpfile.js","hash":"e60630581a5ce8ec2100e7d6d50db71aef654c39","modified":1655497172241},{"_id":"themes/cactus/package.json","hash":"9d9dfe0e611e69c0db7a7de193a03a253263d504","modified":1655497172753},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1655497172255},{"_id":"themes/cactus/languages/ar.yml","hash":"81a88b0593fc89de3118d686681b1f69883c847b","modified":1655497172250},{"_id":"themes/cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1655497172261},{"_id":"themes/cactus/languages/en.yml","hash":"942f37c956f27faacd452f5ba7f4104606b910ee","modified":1655503764740},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1655497172278},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1655497172272},{"_id":"themes/cactus/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1655497172283},{"_id":"themes/cactus/languages/default.yml","hash":"942f37c956f27faacd452f5ba7f4104606b910ee","modified":1655503764740},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1655497172292},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1655497172297},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1655497172311},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1655497172302},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1655497172317},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1655497172288},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1655497172307},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1655497172332},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"8f81faaad9a0615b09dbc23868484a55ec958f6f","modified":1655497172327},{"_id":"themes/cactus/layout/archive.ejs","hash":"5a23d506dd65f9b5fd1d44a73d5e04c935a899e2","modified":1655497172628},{"_id":"themes/cactus/layout/post.ejs","hash":"f9149f294e6142437c58784c41f1d082a61c8b82","modified":1655497172738},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1655497172699},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1655497172711},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1655497172321},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1655497172766},{"_id":"themes/cactus/scripts/meta.js","hash":"654868666b6573b2cee7e750b47ad8a3c2ee13a0","modified":1655497172771},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1655497172786},{"_id":"themes/cactus/layout/index.ejs","hash":"054397351b38f2ae11f15b17baa1a6753ab1ea9d","modified":1655497172651},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1655497172779},{"_id":"themes/cactus/scripts/cdn.js","hash":"887edec364d51efa7c524446483188c6ad05adaf","modified":1655497172759},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1655497172411},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4e75035a427fd137ae7f12940209e8e97845df3b","modified":1655497172338},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"0e06ee826de1af22a63626456ceb8f2b6c0d1555","modified":1655497172398},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"c6bc7e8a422c5bb57f88fed1d1b0694d03e24e74","modified":1655497172601},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"12fd63b51472c9c5b8b7d167eb1a96bf1d686c20","modified":1655497172347},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"95526bec071998144ee0b0fc33f39bb74e5e9c4f","modified":1655497172363},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1655497172596},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1655497172822},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"a901e3c89e4cd1d20a87bfc683b64b6818275946","modified":1655497172519},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1655497172817},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1655497173316},{"_id":"themes/cactus/source/css/_variables.styl","hash":"69d9c5e95edcaee5ccd8218262b989ce721cce79","modified":1655497173322},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1655497173235},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1655497173331},{"_id":"themes/cactus/source/css/style.styl","hash":"5d8afa50dd27d083e09d3b09106f98de46e3c7d0","modified":1655497173336},{"_id":"themes/cactus/source/js/main.js","hash":"187f8545c01e6da8bfce7722250ab012a9656ab5","modified":1655505314121},{"_id":"themes/cactus/source/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1655497173374},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1655497173344},{"_id":"themes/cactus/source/images/favicon.ico","hash":"cdadc343f3e953826b6a7136e05819ac7c44a1a6","modified":1654368744679},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1655497173349},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1655497172462},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1655497172436},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1655497172503},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1655497172485},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1655497172450},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"aa6218d8d5af1e26e7a0d805b1ea864eca2b88c5","modified":1655497172418},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"bc09f8777a6c99030da953dfdb84f793c5e4fd85","modified":1655497172794},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1655497172514},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"1a294382bd14d979525b8ed934d807bc7d083e4d","modified":1655497172497},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"88e93a9d3fe1d0270d65cabdeacc18bd94d45937","modified":1655497172811},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9aa43b1f23d5d268dfa36bd942d6ce97b7677c4d","modified":1655497172799},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d14ef1aa02d0895b6f9321ebfc23a1ec84b054b8","modified":1655497172805},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"31aef892437d5734a134c34f2a8a6610a8f671c3","modified":1655497173241},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"61c2c7c5f73a0022ec41830bea0812a97f522d7c","modified":1655497173261},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1655497173251},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"258370d8ab98e63804ead9bc030f633ca97a1235","modified":1655497173245},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1655497173257},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1655497173302},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1655497173299},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"7f18929e7f4ad6d20da374e8b9f85ce587220a87","modified":1655497173267},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1655497173273},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1655497173309},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1655497173278},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1655497172834},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1655497172834},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1655497172828},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1655497172850},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1655497172844},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1655497172866},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1655497172890},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1655497172855},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1655497172860},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1655497172878},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1655497172872},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1655497172907},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1655497172896},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1655497172883},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1655497172925},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1655497172901},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1655497172919},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1655497172936},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1655497172912},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1655497172942},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1655497172931},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1655497172954},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1655497172960},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1655497172966},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1655497172994},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1655497172948},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1655497172972},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1655497172978},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1655497172988},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1655497173009},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1655497172999},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1655497172983},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1655497173005},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1655497173020},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1655497173015},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1655497173030},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1655497173025},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1655497173035},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1655497173059},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1655497173064},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1655497173069},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1655497173079},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1655497173074},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1655497173088},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1655497173109},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1655497173104},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1655497173099},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1655497173083},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1655497173115},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1655497173129},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1655497173119},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1655497173094},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1655497173124},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1655497173139},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1655497173154},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1655497173164},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1655497173144},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1655497173173},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1655497173159},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1655497173134},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1655497173149},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1655497173168},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1655497173177},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1655497173187},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1655497173182},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1655497173205},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1655497173219},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1655497173193},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1655497173210},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1655497173225},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1655497173199},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1655497173230},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1655497173215},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"6674f81dd01c76be986cf0a8172d1073e56d7ef4","modified":1655497173395},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1655497173669},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1655497173677},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1655497173706},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1655497173712},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1655497173748},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1655497173775},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1655497173739},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1655497173781},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1655497173810},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1655497173804},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1655497173844},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1655497173834},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1655497173866},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1655497173878},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1655497173292},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1655497173872},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"a1f36f9a3fd5ffcd832bf39e9402678978035d48","modified":1655497173285},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1655497173516},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"d1a7eff18db8a47207ea42e34e9d9fbcc66a97a7","modified":1655497173433},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"be22b700cc80c242da898ef8b7bb96adc4e0899f","modified":1655497173440},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"60d794c18c2b58b2b76d2ce17b85c44c48fb2efd","modified":1655497173471},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"c77fcea87e0c4953f2b0ac92dc49a31c664b6ef7","modified":1655497173465},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1655497173523},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1655497173477},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1655497173644},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1655497173653},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1655497173696},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1655497173687},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1655497173719},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1655497173729},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1655497173765},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1655497173757},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1655497173790},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1655497173796},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1655497173819},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1655497173850},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1655497173859},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1655497173827},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"d3cafed4c6596253c1050ee63897aa0f440e4f65","modified":1655497173410},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"98564e5517b7b455e80b2cd503e7bb3b52beb930","modified":1655497173424},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"cfb2c6122bd53141e939ee4ff991a16a29d1bdce","modified":1655497173418},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"09a731f80844483614ff12f86ccbe41db6736cb5","modified":1655497173457},{"_id":"themes/cactus/source/images/logo.png","hash":"87374dd0d7f79d5f395111ad261ca0b390260816","modified":1655504383968},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1655497173555},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1655497173591},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1655497173621},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"97f5404656d9547666479ec64c336467000656ef","modified":1655497173449},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1655497173628},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1655497173566},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1655497173598},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1655497173547},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1655497173575},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1655497173582},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1655497173605},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1655497173613},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1655497173635},{"_id":"source/_posts/Livescript-Review.md","hash":"02158d2009f4ca62fe74d79ea66ff460493bbc8a","modified":1655499178361},{"_id":"source/_posts/My-First-Post.md","hash":"1c0e8d85c901d9ac7295b92d94ff661769144516","modified":1655497664876},{"_id":"source/_posts/Haskell-Monads.md","hash":"16c11e7e644643754d7edcf8dd9400058a0d9678","modified":1655500747346},{"_id":"source/_posts/JS-to-Haskell.md","hash":"940c85818297f1d29ab80a945bba70168c68a8cc","modified":1655500205570},{"_id":"source/_posts/Intro-to-Lambda-Calculus.md","hash":"7f653b57f07bee2519de72295d877dc1e2e9c9f8","modified":1655501689295},{"_id":"source/_posts/index.md","hash":"0f416bbe2999ea093810f18951ba431508076d9d","modified":1655501886988},{"_id":"source/_posts/Minesweeper-in-VB.md","hash":"e6cfc44c2900ff103b3d175f92aaf5d897075948","modified":1655503227315},{"_id":"source/_posts/images/minesweeper-background.jpg","hash":"e87f1d92fa61cc0dc0dd24d928ee7d8ca7465ef6","modified":1654368744689},{"_id":"source/_posts/Minesweeper-in-VB/minesweeper-background.jpg","hash":"e87f1d92fa61cc0dc0dd24d928ee7d8ca7465ef6","modified":1654368744689}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Livescript Review","date":"2017-11-13T21:27:44.000Z","_content":"\n[Overview](#Overview \"Overview\")\n---------------------------------------------\n\n[Livescript](http://livescript.net/) is a javascript preprocessor that has many functional programming features included in it. I decided to write a basic [Assembler Interpreter](https://codepen.io/edwin0258/pen/WXxpMY) on codepen to try it out. This is really the first JS preprocessor I've used, so it was an interesting experience. This is a review of the language after using it in a project.\n\n[Indepth](#Indepth \"Indepth\")\n------------------------------------------\n\nOverall, livescript is more consise than vanilla JS. Take for example the guard syntax in livescript which is syntactical sugar for JS switch/case:\n\n```livescript\nletters = (a) ->                                          \n    | a == \"b\" => \"second letter\"\n    | a == \"a\" => \"first letter\"\n    | otherwise => \"another letter\"\nletters \"d\" # another letter\nletters \"a\" # first letter\nletters \"b\" # second letter\n```\n\nAs you can see, compared to a JS switch/case it is much less verbose.\n\n### [Comprehensions and Ranges](#Comprehensions-and-Ranges \"Comprehensions and Ranges\")\n\nOther awesome features of livescript include the list comprehension and ranges. Python and Haskell both have these features and I find myself using them often. Here is an example:\n\n```livescript\n[i for i in [0 to 10]] # [0,1,2,3,4,5,6,7,8,9,10]\n```\n\n### [Strict equality and Immutability](#Strict-equality-and-Immutability \"Strict equality and Immutability\")\n\nThe livescript `==` is by default strict equality and all types are immutable. You can reassign variables and use regular equality with special syntax. I like that it gives you the ability to still do regular equality, but I really appreciate that strict rules are encouraged which can prevent some headaches.\n\n### [Currying, Piping, Partial application](#Currying-Piping-Partial-application \"Currying, Piping, Partial application\")\n\nYou can partially apply a function in livescript and map each element of an array over that function, it's really cool, check it out:\n\n```livescript\nmap (^3), map (* 2), map (+ 2), [1 2 3] # [216,512,1000]\n```\n\nOperators can be prefix in livescript.\n\n```livescript\n(^) 3 5 # 243\n```\n\nLivescript also has a special syntax for currying (`-->`). This means that you don't need to pass all the variables a function requires at once, you can pass any number of variables and assign that partially applied function to another variable for later use.\n\n```livescript\nanimal = (cls, species, age) --> \"This animal is a #{cls}, known by its species name of #{species}. It has an age of #{age}.\"\n\nmammal = animal(\"mammal\")\ndog = mammal(\"dog\")\njack = dog(12)\n```\n\nThe last thing I want to talk about is piping, you can run data through a sort of pipe and get an output that reflects the operations performed on that data inside the pipe. This improves readability, and as you can see, all the functions in the pipe are pure and do not mutate the original data by default. (Note that for these features you will need to have [preludels](http://www.preludels.com/))\n\n```livescript\narr = [to 20]\narr |> filter even \n    |> foldl ((acc, y) -> acc ++ (* 2) y), [] \n    |> groupBy (> 10)\n    \narr # orginal array\n```\n\n[Conclusion](#Conclusion \"Conclusion\")\n---------------------------------------------------\n\nThere are so many interesting things you can do with livescript, I've just scratched the surface here to what is possible. I did enjoy using livescript to make a project and would recommend that you give livescript a try. Although, maybe there is a better option than livescript (let me know).\n\n[Other Resources](#Other-Resources \"Other Resources\")\n------------------------------------------------------------------\n\nCheck out: [Learn Livescript in x mins](https://learnxinyminutes.com/docs/livescript/) for deeper dive into the prepocessor.","source":"_posts/Livescript-Review.md","raw":"---\ntitle: Livescript Review\ndate: 2017-11-13 13:27:44\ntags:\n---\n\n[Overview](#Overview \"Overview\")\n---------------------------------------------\n\n[Livescript](http://livescript.net/) is a javascript preprocessor that has many functional programming features included in it. I decided to write a basic [Assembler Interpreter](https://codepen.io/edwin0258/pen/WXxpMY) on codepen to try it out. This is really the first JS preprocessor I've used, so it was an interesting experience. This is a review of the language after using it in a project.\n\n[Indepth](#Indepth \"Indepth\")\n------------------------------------------\n\nOverall, livescript is more consise than vanilla JS. Take for example the guard syntax in livescript which is syntactical sugar for JS switch/case:\n\n```livescript\nletters = (a) ->                                          \n    | a == \"b\" => \"second letter\"\n    | a == \"a\" => \"first letter\"\n    | otherwise => \"another letter\"\nletters \"d\" # another letter\nletters \"a\" # first letter\nletters \"b\" # second letter\n```\n\nAs you can see, compared to a JS switch/case it is much less verbose.\n\n### [Comprehensions and Ranges](#Comprehensions-and-Ranges \"Comprehensions and Ranges\")\n\nOther awesome features of livescript include the list comprehension and ranges. Python and Haskell both have these features and I find myself using them often. Here is an example:\n\n```livescript\n[i for i in [0 to 10]] # [0,1,2,3,4,5,6,7,8,9,10]\n```\n\n### [Strict equality and Immutability](#Strict-equality-and-Immutability \"Strict equality and Immutability\")\n\nThe livescript `==` is by default strict equality and all types are immutable. You can reassign variables and use regular equality with special syntax. I like that it gives you the ability to still do regular equality, but I really appreciate that strict rules are encouraged which can prevent some headaches.\n\n### [Currying, Piping, Partial application](#Currying-Piping-Partial-application \"Currying, Piping, Partial application\")\n\nYou can partially apply a function in livescript and map each element of an array over that function, it's really cool, check it out:\n\n```livescript\nmap (^3), map (* 2), map (+ 2), [1 2 3] # [216,512,1000]\n```\n\nOperators can be prefix in livescript.\n\n```livescript\n(^) 3 5 # 243\n```\n\nLivescript also has a special syntax for currying (`-->`). This means that you don't need to pass all the variables a function requires at once, you can pass any number of variables and assign that partially applied function to another variable for later use.\n\n```livescript\nanimal = (cls, species, age) --> \"This animal is a #{cls}, known by its species name of #{species}. It has an age of #{age}.\"\n\nmammal = animal(\"mammal\")\ndog = mammal(\"dog\")\njack = dog(12)\n```\n\nThe last thing I want to talk about is piping, you can run data through a sort of pipe and get an output that reflects the operations performed on that data inside the pipe. This improves readability, and as you can see, all the functions in the pipe are pure and do not mutate the original data by default. (Note that for these features you will need to have [preludels](http://www.preludels.com/))\n\n```livescript\narr = [to 20]\narr |> filter even \n    |> foldl ((acc, y) -> acc ++ (* 2) y), [] \n    |> groupBy (> 10)\n    \narr # orginal array\n```\n\n[Conclusion](#Conclusion \"Conclusion\")\n---------------------------------------------------\n\nThere are so many interesting things you can do with livescript, I've just scratched the surface here to what is possible. I did enjoy using livescript to make a project and would recommend that you give livescript a try. Although, maybe there is a better option than livescript (let me know).\n\n[Other Resources](#Other-Resources \"Other Resources\")\n------------------------------------------------------------------\n\nCheck out: [Learn Livescript in x mins](https://learnxinyminutes.com/docs/livescript/) for deeper dive into the prepocessor.","slug":"Livescript-Review","published":1,"updated":"2022-06-17T20:52:58.361Z","_id":"cl4iwndri0000t6we21o4cbao","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a><a href=\"#Overview\" title=\"Overview\">Overview</a></h2><p><a href=\"http://livescript.net/\">Livescript</a> is a javascript preprocessor that has many functional programming features included in it. I decided to write a basic <a href=\"https://codepen.io/edwin0258/pen/WXxpMY\">Assembler Interpreter</a> on codepen to try it out. This is really the first JS preprocessor I’ve used, so it was an interesting experience. This is a review of the language after using it in a project.</p>\n<h2 id=\"Indepth\"><a href=\"#Indepth\" class=\"headerlink\" title=\"Indepth\"></a><a href=\"#Indepth\" title=\"Indepth\">Indepth</a></h2><p>Overall, livescript is more consise than vanilla JS. Take for example the guard syntax in livescript which is syntactical sugar for JS switch&#x2F;case:</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">letters</span> = <span class=\"params\">(a)</span> -&gt;</span>                                          </span><br><span class=\"line\">    | a == <span class=\"string\">&quot;b&quot;</span> =&gt; <span class=\"string\">&quot;second letter&quot;</span></span><br><span class=\"line\">    | a == <span class=\"string\">&quot;a&quot;</span> =&gt; <span class=\"string\">&quot;first letter&quot;</span></span><br><span class=\"line\">    | <span class=\"keyword\">otherwise</span> =&gt; <span class=\"string\">&quot;another letter&quot;</span></span><br><span class=\"line\">letters <span class=\"string\">&quot;d&quot;</span> <span class=\"comment\"># another letter</span></span><br><span class=\"line\">letters <span class=\"string\">&quot;a&quot;</span> <span class=\"comment\"># first letter</span></span><br><span class=\"line\">letters <span class=\"string\">&quot;b&quot;</span> <span class=\"comment\"># second letter</span></span><br></pre></td></tr></table></figure>\n\n<p>As you can see, compared to a JS switch&#x2F;case it is much less verbose.</p>\n<h3 id=\"Comprehensions-and-Ranges\"><a href=\"#Comprehensions-and-Ranges\" class=\"headerlink\" title=\"Comprehensions and Ranges\"></a><a href=\"#Comprehensions-and-Ranges\" title=\"Comprehensions and Ranges\">Comprehensions and Ranges</a></h3><p>Other awesome features of livescript include the list comprehension and ranges. Python and Haskell both have these features and I find myself using them often. Here is an example:</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> [<span class=\"number\">0</span> <span class=\"keyword\">to</span> <span class=\"number\">10</span>]] <span class=\"comment\"># [0,1,2,3,4,5,6,7,8,9,10]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Strict-equality-and-Immutability\"><a href=\"#Strict-equality-and-Immutability\" class=\"headerlink\" title=\"Strict equality and Immutability\"></a><a href=\"#Strict-equality-and-Immutability\" title=\"Strict equality and Immutability\">Strict equality and Immutability</a></h3><p>The livescript <code>==</code> is by default strict equality and all types are immutable. You can reassign variables and use regular equality with special syntax. I like that it gives you the ability to still do regular equality, but I really appreciate that strict rules are encouraged which can prevent some headaches.</p>\n<h3 id=\"Currying-Piping-Partial-application\"><a href=\"#Currying-Piping-Partial-application\" class=\"headerlink\" title=\"Currying, Piping, Partial application\"></a><a href=\"#Currying-Piping-Partial-application\" title=\"Currying, Piping, Partial application\">Currying, Piping, Partial application</a></h3><p>You can partially apply a function in livescript and map each element of an array over that function, it’s really cool, check it out:</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">map</span> (^<span class=\"number\">3</span>), <span class=\"keyword\">map</span> (* <span class=\"number\">2</span>), <span class=\"keyword\">map</span> (+ <span class=\"number\">2</span>), [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>] <span class=\"comment\"># [216,512,1000]</span></span><br></pre></td></tr></table></figure>\n\n<p>Operators can be prefix in livescript.</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(^) <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"comment\"># 243</span></span><br></pre></td></tr></table></figure>\n\n<p>Livescript also has a special syntax for currying (<code>--&gt;</code>). This means that you don’t need to pass all the variables a function requires at once, you can pass any number of variables and assign that partially applied function to another variable for later use.</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">animal</span> = <span class=\"params\">(cls, species, age)</span> --&gt;</span> <span class=\"string\">&quot;This animal is a <span class=\"subst\">#&#123;cls&#125;</span>, known by its species name of <span class=\"subst\">#&#123;species&#125;</span>. It has an age of <span class=\"subst\">#&#123;age&#125;</span>.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">mammal = animal(<span class=\"string\">&quot;mammal&quot;</span>)</span><br><span class=\"line\">dog = mammal(<span class=\"string\">&quot;dog&quot;</span>)</span><br><span class=\"line\">jack = dog(<span class=\"number\">12</span>)</span><br></pre></td></tr></table></figure>\n\n<p>The last thing I want to talk about is piping, you can run data through a sort of pipe and get an output that reflects the operations performed on that data inside the pipe. This improves readability, and as you can see, all the functions in the pipe are pure and do not mutate the original data by default. (Note that for these features you will need to have <a href=\"http://www.preludels.com/\">preludels</a>)</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [<span class=\"keyword\">to</span> <span class=\"number\">20</span>]</span><br><span class=\"line\">arr |&gt; filter even </span><br><span class=\"line\">    |&gt; foldl <span class=\"function\"><span class=\"params\">((acc, y) -&gt; acc ++ (* <span class=\"number\">2</span>) y)</span>, [] </span></span><br><span class=\"line\"><span class=\"function\">    |&gt; <span class=\"title\">groupBy</span> <span class=\"params\">(&gt; <span class=\"number\">10</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">arr</span> # <span class=\"title\">orginal</span> <span class=\"title\">array</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a><a href=\"#Conclusion\" title=\"Conclusion\">Conclusion</a></h2><p>There are so many interesting things you can do with livescript, I’ve just scratched the surface here to what is possible. I did enjoy using livescript to make a project and would recommend that you give livescript a try. Although, maybe there is a better option than livescript (let me know).</p>\n<h2 id=\"Other-Resources\"><a href=\"#Other-Resources\" class=\"headerlink\" title=\"Other Resources\"></a><a href=\"#Other-Resources\" title=\"Other Resources\">Other Resources</a></h2><p>Check out: <a href=\"https://learnxinyminutes.com/docs/livescript/\">Learn Livescript in x mins</a> for deeper dive into the prepocessor.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a><a href=\"#Overview\" title=\"Overview\">Overview</a></h2><p><a href=\"http://livescript.net/\">Livescript</a> is a javascript preprocessor that has many functional programming features included in it. I decided to write a basic <a href=\"https://codepen.io/edwin0258/pen/WXxpMY\">Assembler Interpreter</a> on codepen to try it out. This is really the first JS preprocessor I’ve used, so it was an interesting experience. This is a review of the language after using it in a project.</p>\n<h2 id=\"Indepth\"><a href=\"#Indepth\" class=\"headerlink\" title=\"Indepth\"></a><a href=\"#Indepth\" title=\"Indepth\">Indepth</a></h2><p>Overall, livescript is more consise than vanilla JS. Take for example the guard syntax in livescript which is syntactical sugar for JS switch&#x2F;case:</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">letters</span> = <span class=\"params\">(a)</span> -&gt;</span>                                          </span><br><span class=\"line\">    | a == <span class=\"string\">&quot;b&quot;</span> =&gt; <span class=\"string\">&quot;second letter&quot;</span></span><br><span class=\"line\">    | a == <span class=\"string\">&quot;a&quot;</span> =&gt; <span class=\"string\">&quot;first letter&quot;</span></span><br><span class=\"line\">    | <span class=\"keyword\">otherwise</span> =&gt; <span class=\"string\">&quot;another letter&quot;</span></span><br><span class=\"line\">letters <span class=\"string\">&quot;d&quot;</span> <span class=\"comment\"># another letter</span></span><br><span class=\"line\">letters <span class=\"string\">&quot;a&quot;</span> <span class=\"comment\"># first letter</span></span><br><span class=\"line\">letters <span class=\"string\">&quot;b&quot;</span> <span class=\"comment\"># second letter</span></span><br></pre></td></tr></table></figure>\n\n<p>As you can see, compared to a JS switch&#x2F;case it is much less verbose.</p>\n<h3 id=\"Comprehensions-and-Ranges\"><a href=\"#Comprehensions-and-Ranges\" class=\"headerlink\" title=\"Comprehensions and Ranges\"></a><a href=\"#Comprehensions-and-Ranges\" title=\"Comprehensions and Ranges\">Comprehensions and Ranges</a></h3><p>Other awesome features of livescript include the list comprehension and ranges. Python and Haskell both have these features and I find myself using them often. Here is an example:</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> [<span class=\"number\">0</span> <span class=\"keyword\">to</span> <span class=\"number\">10</span>]] <span class=\"comment\"># [0,1,2,3,4,5,6,7,8,9,10]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Strict-equality-and-Immutability\"><a href=\"#Strict-equality-and-Immutability\" class=\"headerlink\" title=\"Strict equality and Immutability\"></a><a href=\"#Strict-equality-and-Immutability\" title=\"Strict equality and Immutability\">Strict equality and Immutability</a></h3><p>The livescript <code>==</code> is by default strict equality and all types are immutable. You can reassign variables and use regular equality with special syntax. I like that it gives you the ability to still do regular equality, but I really appreciate that strict rules are encouraged which can prevent some headaches.</p>\n<h3 id=\"Currying-Piping-Partial-application\"><a href=\"#Currying-Piping-Partial-application\" class=\"headerlink\" title=\"Currying, Piping, Partial application\"></a><a href=\"#Currying-Piping-Partial-application\" title=\"Currying, Piping, Partial application\">Currying, Piping, Partial application</a></h3><p>You can partially apply a function in livescript and map each element of an array over that function, it’s really cool, check it out:</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">map</span> (^<span class=\"number\">3</span>), <span class=\"keyword\">map</span> (* <span class=\"number\">2</span>), <span class=\"keyword\">map</span> (+ <span class=\"number\">2</span>), [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>] <span class=\"comment\"># [216,512,1000]</span></span><br></pre></td></tr></table></figure>\n\n<p>Operators can be prefix in livescript.</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(^) <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"comment\"># 243</span></span><br></pre></td></tr></table></figure>\n\n<p>Livescript also has a special syntax for currying (<code>--&gt;</code>). This means that you don’t need to pass all the variables a function requires at once, you can pass any number of variables and assign that partially applied function to another variable for later use.</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">animal</span> = <span class=\"params\">(cls, species, age)</span> --&gt;</span> <span class=\"string\">&quot;This animal is a <span class=\"subst\">#&#123;cls&#125;</span>, known by its species name of <span class=\"subst\">#&#123;species&#125;</span>. It has an age of <span class=\"subst\">#&#123;age&#125;</span>.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">mammal = animal(<span class=\"string\">&quot;mammal&quot;</span>)</span><br><span class=\"line\">dog = mammal(<span class=\"string\">&quot;dog&quot;</span>)</span><br><span class=\"line\">jack = dog(<span class=\"number\">12</span>)</span><br></pre></td></tr></table></figure>\n\n<p>The last thing I want to talk about is piping, you can run data through a sort of pipe and get an output that reflects the operations performed on that data inside the pipe. This improves readability, and as you can see, all the functions in the pipe are pure and do not mutate the original data by default. (Note that for these features you will need to have <a href=\"http://www.preludels.com/\">preludels</a>)</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [<span class=\"keyword\">to</span> <span class=\"number\">20</span>]</span><br><span class=\"line\">arr |&gt; filter even </span><br><span class=\"line\">    |&gt; foldl <span class=\"function\"><span class=\"params\">((acc, y) -&gt; acc ++ (* <span class=\"number\">2</span>) y)</span>, [] </span></span><br><span class=\"line\"><span class=\"function\">    |&gt; <span class=\"title\">groupBy</span> <span class=\"params\">(&gt; <span class=\"number\">10</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">arr</span> # <span class=\"title\">orginal</span> <span class=\"title\">array</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a><a href=\"#Conclusion\" title=\"Conclusion\">Conclusion</a></h2><p>There are so many interesting things you can do with livescript, I’ve just scratched the surface here to what is possible. I did enjoy using livescript to make a project and would recommend that you give livescript a try. Although, maybe there is a better option than livescript (let me know).</p>\n<h2 id=\"Other-Resources\"><a href=\"#Other-Resources\" class=\"headerlink\" title=\"Other Resources\"></a><a href=\"#Other-Resources\" title=\"Other Resources\">Other Resources</a></h2><p>Check out: <a href=\"https://learnxinyminutes.com/docs/livescript/\">Learn Livescript in x mins</a> for deeper dive into the prepocessor.</p>\n"},{"title":"JS to Haskell","date":"2017-11-30T21:27:44.000Z","_content":"\n[Introduction](#Introduction \"Introduction\")\n---------------------------------------------------------\n\nIn this post I will be solving some programming problems with JS and\nHaskell. This gives a side by side comparison of the two languages and I\nthought it would be interesting to see the similarities and differences.\nLet's get started.\n\n[Problem 1 (Christmas Trees)](#Problem-1-Christmas-Trees \"Problem 1 (Christmas Trees)\")\n----------------------------------------------------------------------------------------------------\n\n### [Overview](#Overview \"Overview\")\n\nLet's pretend you are the seller of colorful christmas trees online.\nEach color has a different price and your job here is to calculate the\ntotal cost of christmas tree orders for each customer. Customers can\nchoose the color, lights, and height of each tree.\n\n### [Details](#Details \"Details\")\n\n Tree Color |  Price\n  ------------ | -------\n  Red       |   \\$250\n  Blue      |   \\$200\n  Yellow    |   \\$170\n  Green     |   \\$200\n  Silver    |   \\$340\n  Gold      |   \\$400\n  White     |   \\$450\n\n\n  Light Type  |   Price\n  -------------- | -------\n  Unlit       |   \\$+0\n  White       |   \\$+15\n  Multi-color  |  \\$+30\n  Single-color |  \\$+20\n\n\n  Height       |      Price\n  ------------------ | --------\n  5 feet and under |  \\$+0\n  6 feet          |   \\$+50\n  7 feet          |   \\$+100\n  8 feet         |    \\$+150\n  8+ feet         |   \\$+200\n\n*Note: We can take multiple tree orders at a time\nWe are also assuming that the data entered by the user is valid.*\n\n### [Javascript Solution](#Javascript-Solution \"Javascript Solution\")\n\n```js\nconst trees = {\n  \"red\":    250,\n  \"blue\":   200,\n  \"green\":  200,\n  \"yellow\": 170,\n  \"silver\": 340,\n  \"gold\":   400,\n  \"white\":  450\n};\n\nconst lights = {\n  \"unlit\":  0,\n  \"white\":  15,\n  \"multi\":  30,\n  \"single\": 20\n};\n\nconst heights = x => { \n  switch(true) {\n    case (x <= 5): return 0\n    case (x <= 6): return 50\n    case (x <= 7): return 100\n    case (x <= 8): return 150\n    default:       return 200\n  }\n};\n\nconst treeOrder = (...orders) =>\n    orders.reduce((t, [tree, type, height]) =>\n        t += trees[tree] + lights[type] + heights(height),0);\n\n```\n\nHere I create 2 constant lookup tables for `trees` and `lights` to store\nthe prices. Height is a little more tricky because there are an infinite\nnumber of possibilities the number could be (In a real world situation\nthere would probably be only a set number of sizes to choose from, so a\nlookup table would be possible). I created a simple switch inside the\n`heights` function to account for the varient in potential input.\n\nThe `treeOrder` function will take any number of orders and reduce them\nto a single total value. For each order, I use pattern matching to get\nthe tree color, light type, and height. Using these values, I'm able to\nget some price amounts which are all added to the total amount.\n\n### [Haskell Solution](#Haskell-Solution \"Haskell Solution\")\n\n```haskell\nimport Control.Monad\n\ntreeOrder :: [(String, String, Integer)] -> Maybe Integer\ntreeOrder [] = Just 0\ntreeOrder orders = foldM (fmap . (+)) 0 info\n  where trees = [(\"red\",    250)\n                ,(\"blue\",   200)\n                ,(\"green\",  200)\n                ,(\"yellow\", 170)\n                ,(\"silver\", 340)\n                ,(\"gold\",   400)\n                ,(\"white\",  450)]\n                \n        lights = [(\"unlit\",  0)\n                ,(\"white\",  15)\n                ,(\"multi\",  30)\n                ,(\"single\", 20)]\n        \n        heights x\n          | x <= 5 = 0\n          | x <= 6 = 50\n          | x <= 7 = 100\n          | x <= 8 = 150\n          | otherwise = 200\n        \n        (tree, light, height) = head orders\n        \n        info = [lookup tree trees\n               ,lookup light lights\n               ,Just $ heights height\n               ,getTree $ tail orders]\n```\n\nWith Haskell, I define the lookup tables and height function inside the\n`where` clause of the `treeOrder` function. I am then using pattern\nmatching after the height function to get the tree, light, and height\nvalues for the current order. `info` combines all the lookup values and\nfunction value into a list. The last element of the info list is how all\norders will be added together, using recursion. So, the next orders\nvalues will show up as the last element of the `info` list once it is\ntime to add everything together.\n\nOnce the full list has been calculated, I fold over the values to get a\nsingle total value (like reduce).\n\n[Problem 2 (Tic Tac Toe)](#Problem-2-Tic-Tac-Toe \"Problem 2 (Tic Tac Toe)\")\n----------------------------------------------------------------------------------------\n\n### [Overview](#Overview-1 \"Overview\")\n\nCreate an interface that users can play a game of tic tac toe on.\n\n### [Details](#Details-1 \"Details\")\n\n-   Users should be able to add their color (x or o) to the board.\n-   When there are 3 of a color in any particular direction, that user\n    wins!\n-   Function should take a move or multiple moves.\n-   Input is expected to be valid to avoid adding too much complexity to\n    solutions.\n\n### [Javascript Solution](#Javascript-Solution-1 \"Javascript Solution\")\n\n```javascript\nconst transpose = array =>\n  array[0].map((col, i) => array.map(row => row[i]));\n\nconst move = (board, moves, color) => \n  moves.reduce((arr, [y,x]) => {\n    arr[y][x] = color;\n    color = (color == \"x\") ? \"o\" : \"x\";\n    return arr;\n  }, board);\n  \nconst genBoard = (x, y) => \n  Array(x).fill().map(() => Array(y).fill(\"\"));\n\nconst check = board => {\n  const getVal = lst => [...new Set(lst)];\n  \n  const chk = x => (getVal(x).length == 1) ? getVal(x)[0] : \"\";\n  \n  const horzCheck = board.map(chk);\n  const vertCheck = transpose(board).map(chk);\n  \n  function diagonalCheck(){\n    const [d1, d2] = [[],[]];\n    \n    for(x = 0; x < board.length; x++) {\n      d1.push(board[x][x]);\n      d2.push(board[x][board[0].length - 1 - x]);\n    }\n    \n    return [d1].map(chk).concat([d2].map(chk));\n  }\n  \n  const result = [...horzCheck, ...vertCheck, ...diagonalCheck()];\n  \n  if(result.includes(\"x\") && result.includes(\"o\")) return \"Tie\";\n  else if(result.includes(\"x\")) return \"Black wins!\";\n  else if(result.includes(\"o\")) return \"White wins!\";\n  \n  return \"No one wins.\";\n}\n```\n\n\n*Running a game in console*\n\n```javascript\n> let g = move(genBoard(3,3),[[0,0],[2,1],[0,1],[0,2],[1,1],[2,2],[1,2],[2,0]],\"x\")\n=> undefined\n> check(g)\n=> 'White wins!'\n```\n\nI will go over the the code by line numbers to make it a little easier\nto organize my thoughts.\n\n**1** - To make life easier, I first define a transpose function. It\nwill take an array and swap the columns and rows.\n\n**4** - `move` takes a board, move, and a color. It adds the moves to\nthe board using a `reduce`, on each loop in the reduce the color is\nchanged to the opposite color. It might be a little silly to use a\n`reduce`, but this way I can some avoid extra code.\n\n**11** - `genBoard` is a helper function for generating an array of\narrays that represents the tic tac toe board.\n\n**15** - `getVal` will return a list of unique values.\n\n**17** - `chk` is the general checker for sections of the board. If all\nvalues in a section are the same then we return that value, else return\nan empty string.\n\n**19/20** - More specific checks for columns and rows of the board\n(horizontal and vertical).\n\n**22** - Checking diagonals on the board is a little more tricky. By\nincrementing both x and y index for each pass of a for loop I can get\nthe diagonal from left to right. If y is counting up and x is counting\ndown I can also get the right to left diagonal (line 27).\n\n**35** - Often I omit the curly braces on single line expressions. Just\nseems cleaner and more readable. Depending on all the checks, the\n`check` function is now returning the correct message.\n\n### [Haskell Solution](#Haskell-Solution-1 \"Haskell Solution\")\n\n```haskell\nimport Data.List\n\ngenBoard :: Int -> Int -> [[String]]\ngenBoard x y = take y $ cycle [take x $ repeat \"\"]\n\nmove :: [(Int, Int)] -> [[String]] -> String -> [[String]]\nmove [] board _ = board\nmove moves board color = move (tail moves) newBoard nextColor\n  where mv = head moves\n        nextColor \n          | color == \"x\" = \"o\"\n          | otherwise    = \"x\"\n        newRow = replace (fst mv) color (board !! (snd mv))\n        newBoard = replace (snd mv) newRow board\n        \n        replace n newVal (x:xs)\n          | n == 0 = newVal:xs\n          | otherwise = x:replace (n-1) newVal xs \n\ncheck :: [[String]] -> String\ncheck board\n  | \"o\" `elem` result && \"x\" `elem` result = \"Tie\"\n  | \"o\" `elem` result = \"White wins!\"\n  | \"x\" `elem` result = \"Black wins!\"\n  | otherwise = \"No one wins.\"\n  where chk x = foldl (\\acc a -> if (length $ nub a) == 1 then a !! 0:acc else acc) [] x\n        \n        horzCheck = chk board\n        vertCheck = chk $ transpose board\n        diagonalCheck = chk  \n          [zipWith (!!) board [0..]\n          ,zipWith (!!) board [length board-1,length board-2..]]\n        \n        result = horzCheck ++ vertCheck ++ diagonalCheck\n```\n\n*Running a game in GHCi*\n\n```javascript\n> let g = game [(0,0),(2,1),(0,1),(0,2),(1,1),(2,2),(1,2),(2,0)] (genBoard 3 3) \"x\"\n> check g\n=> \"White wins!\"\n```\n\n**1** - Import a package in haskell, `Data.List` has some useful\nfunctions like `transpose` (I had to make this in JS).\n\n**3** - `genBoard` is a helper function for generating a game board.\nThis will repeat an empty string `x` times and place it into a list. I\nthen take `y` out of an infinite cycle of the previous list, which\nreturns a list of lists with the correct dimensions. I could have also\nused a list comprehension here, but I think this looks cleaner.\n\n**6** - This type signature for the function is kind of interesting. The\n`move` function takes a list of tuples representing the coordinates, a\nlist of lists containing strings (the board), and a string (representing\nthe color). It returns a new board.\n\n**7** - If there are no more moves to make then return the final board.\nThis is how the recursive function will stop.\n\n**8** - Haskell loves recursion, since there are possibly more moves, I\npass all the moves except the the current move back into the `move`\nfunction with the next color and updated board.\n\n**11** - The guard (similar to a switch(true)?) gets the next color, if\nprevious color was black then the next color will be white for example.\n\n**13** - `newRow` is the row with the new piece placed on it from move.\nSince data is immutable in haskell, I can't directly state\n`(board !! y !! x) = color`. Line 14 is the whole board, so once we have\nthe correct row, we then can place it into a new copy of the board. It's\nsort of confusing, but it gets the job done. I could have used\n`Control.Lens` but this method feels a bit cleaner.\n\n**16** - `replace` will go through the list one index at a time until n\nis 0, once n is 0 it will replace the current item under it with the new\nvalue. This function also uses recursion.\n\n**21** - `check` has a guard that will check the `result` for the\ncontents and then determine the appropriate message to display.\n\n**26** - I like to think that `foldl` is kind of like a JS `reduce`. The\nrest of the fold is basically the same thought process as in JS, just\ndifferent syntax.\n\n**31** - Using `zipWith` I can write some fairly clean code to get the\ndiagonals of the board.\n\n[Conclusion](#Conclusion \"Conclusion\")\n---------------------------------------------------\n\nAwesome stuff! It's interesting to see two fairly different languages\nside-by-side. There are definitely some similarities, such as the\n`guard` and `switch` or `foldl` and `reduce`. There are also\ndifferences; Haskell being a statically typed for example. Try to find\nyour own similarities and differences, cheers!","source":"_posts/JS-to-Haskell.md","raw":"---\ntitle: JS to Haskell\ndate: 2017-11-30 13:27:44\ntags:\n---\n\n[Introduction](#Introduction \"Introduction\")\n---------------------------------------------------------\n\nIn this post I will be solving some programming problems with JS and\nHaskell. This gives a side by side comparison of the two languages and I\nthought it would be interesting to see the similarities and differences.\nLet's get started.\n\n[Problem 1 (Christmas Trees)](#Problem-1-Christmas-Trees \"Problem 1 (Christmas Trees)\")\n----------------------------------------------------------------------------------------------------\n\n### [Overview](#Overview \"Overview\")\n\nLet's pretend you are the seller of colorful christmas trees online.\nEach color has a different price and your job here is to calculate the\ntotal cost of christmas tree orders for each customer. Customers can\nchoose the color, lights, and height of each tree.\n\n### [Details](#Details \"Details\")\n\n Tree Color |  Price\n  ------------ | -------\n  Red       |   \\$250\n  Blue      |   \\$200\n  Yellow    |   \\$170\n  Green     |   \\$200\n  Silver    |   \\$340\n  Gold      |   \\$400\n  White     |   \\$450\n\n\n  Light Type  |   Price\n  -------------- | -------\n  Unlit       |   \\$+0\n  White       |   \\$+15\n  Multi-color  |  \\$+30\n  Single-color |  \\$+20\n\n\n  Height       |      Price\n  ------------------ | --------\n  5 feet and under |  \\$+0\n  6 feet          |   \\$+50\n  7 feet          |   \\$+100\n  8 feet         |    \\$+150\n  8+ feet         |   \\$+200\n\n*Note: We can take multiple tree orders at a time\nWe are also assuming that the data entered by the user is valid.*\n\n### [Javascript Solution](#Javascript-Solution \"Javascript Solution\")\n\n```js\nconst trees = {\n  \"red\":    250,\n  \"blue\":   200,\n  \"green\":  200,\n  \"yellow\": 170,\n  \"silver\": 340,\n  \"gold\":   400,\n  \"white\":  450\n};\n\nconst lights = {\n  \"unlit\":  0,\n  \"white\":  15,\n  \"multi\":  30,\n  \"single\": 20\n};\n\nconst heights = x => { \n  switch(true) {\n    case (x <= 5): return 0\n    case (x <= 6): return 50\n    case (x <= 7): return 100\n    case (x <= 8): return 150\n    default:       return 200\n  }\n};\n\nconst treeOrder = (...orders) =>\n    orders.reduce((t, [tree, type, height]) =>\n        t += trees[tree] + lights[type] + heights(height),0);\n\n```\n\nHere I create 2 constant lookup tables for `trees` and `lights` to store\nthe prices. Height is a little more tricky because there are an infinite\nnumber of possibilities the number could be (In a real world situation\nthere would probably be only a set number of sizes to choose from, so a\nlookup table would be possible). I created a simple switch inside the\n`heights` function to account for the varient in potential input.\n\nThe `treeOrder` function will take any number of orders and reduce them\nto a single total value. For each order, I use pattern matching to get\nthe tree color, light type, and height. Using these values, I'm able to\nget some price amounts which are all added to the total amount.\n\n### [Haskell Solution](#Haskell-Solution \"Haskell Solution\")\n\n```haskell\nimport Control.Monad\n\ntreeOrder :: [(String, String, Integer)] -> Maybe Integer\ntreeOrder [] = Just 0\ntreeOrder orders = foldM (fmap . (+)) 0 info\n  where trees = [(\"red\",    250)\n                ,(\"blue\",   200)\n                ,(\"green\",  200)\n                ,(\"yellow\", 170)\n                ,(\"silver\", 340)\n                ,(\"gold\",   400)\n                ,(\"white\",  450)]\n                \n        lights = [(\"unlit\",  0)\n                ,(\"white\",  15)\n                ,(\"multi\",  30)\n                ,(\"single\", 20)]\n        \n        heights x\n          | x <= 5 = 0\n          | x <= 6 = 50\n          | x <= 7 = 100\n          | x <= 8 = 150\n          | otherwise = 200\n        \n        (tree, light, height) = head orders\n        \n        info = [lookup tree trees\n               ,lookup light lights\n               ,Just $ heights height\n               ,getTree $ tail orders]\n```\n\nWith Haskell, I define the lookup tables and height function inside the\n`where` clause of the `treeOrder` function. I am then using pattern\nmatching after the height function to get the tree, light, and height\nvalues for the current order. `info` combines all the lookup values and\nfunction value into a list. The last element of the info list is how all\norders will be added together, using recursion. So, the next orders\nvalues will show up as the last element of the `info` list once it is\ntime to add everything together.\n\nOnce the full list has been calculated, I fold over the values to get a\nsingle total value (like reduce).\n\n[Problem 2 (Tic Tac Toe)](#Problem-2-Tic-Tac-Toe \"Problem 2 (Tic Tac Toe)\")\n----------------------------------------------------------------------------------------\n\n### [Overview](#Overview-1 \"Overview\")\n\nCreate an interface that users can play a game of tic tac toe on.\n\n### [Details](#Details-1 \"Details\")\n\n-   Users should be able to add their color (x or o) to the board.\n-   When there are 3 of a color in any particular direction, that user\n    wins!\n-   Function should take a move or multiple moves.\n-   Input is expected to be valid to avoid adding too much complexity to\n    solutions.\n\n### [Javascript Solution](#Javascript-Solution-1 \"Javascript Solution\")\n\n```javascript\nconst transpose = array =>\n  array[0].map((col, i) => array.map(row => row[i]));\n\nconst move = (board, moves, color) => \n  moves.reduce((arr, [y,x]) => {\n    arr[y][x] = color;\n    color = (color == \"x\") ? \"o\" : \"x\";\n    return arr;\n  }, board);\n  \nconst genBoard = (x, y) => \n  Array(x).fill().map(() => Array(y).fill(\"\"));\n\nconst check = board => {\n  const getVal = lst => [...new Set(lst)];\n  \n  const chk = x => (getVal(x).length == 1) ? getVal(x)[0] : \"\";\n  \n  const horzCheck = board.map(chk);\n  const vertCheck = transpose(board).map(chk);\n  \n  function diagonalCheck(){\n    const [d1, d2] = [[],[]];\n    \n    for(x = 0; x < board.length; x++) {\n      d1.push(board[x][x]);\n      d2.push(board[x][board[0].length - 1 - x]);\n    }\n    \n    return [d1].map(chk).concat([d2].map(chk));\n  }\n  \n  const result = [...horzCheck, ...vertCheck, ...diagonalCheck()];\n  \n  if(result.includes(\"x\") && result.includes(\"o\")) return \"Tie\";\n  else if(result.includes(\"x\")) return \"Black wins!\";\n  else if(result.includes(\"o\")) return \"White wins!\";\n  \n  return \"No one wins.\";\n}\n```\n\n\n*Running a game in console*\n\n```javascript\n> let g = move(genBoard(3,3),[[0,0],[2,1],[0,1],[0,2],[1,1],[2,2],[1,2],[2,0]],\"x\")\n=> undefined\n> check(g)\n=> 'White wins!'\n```\n\nI will go over the the code by line numbers to make it a little easier\nto organize my thoughts.\n\n**1** - To make life easier, I first define a transpose function. It\nwill take an array and swap the columns and rows.\n\n**4** - `move` takes a board, move, and a color. It adds the moves to\nthe board using a `reduce`, on each loop in the reduce the color is\nchanged to the opposite color. It might be a little silly to use a\n`reduce`, but this way I can some avoid extra code.\n\n**11** - `genBoard` is a helper function for generating an array of\narrays that represents the tic tac toe board.\n\n**15** - `getVal` will return a list of unique values.\n\n**17** - `chk` is the general checker for sections of the board. If all\nvalues in a section are the same then we return that value, else return\nan empty string.\n\n**19/20** - More specific checks for columns and rows of the board\n(horizontal and vertical).\n\n**22** - Checking diagonals on the board is a little more tricky. By\nincrementing both x and y index for each pass of a for loop I can get\nthe diagonal from left to right. If y is counting up and x is counting\ndown I can also get the right to left diagonal (line 27).\n\n**35** - Often I omit the curly braces on single line expressions. Just\nseems cleaner and more readable. Depending on all the checks, the\n`check` function is now returning the correct message.\n\n### [Haskell Solution](#Haskell-Solution-1 \"Haskell Solution\")\n\n```haskell\nimport Data.List\n\ngenBoard :: Int -> Int -> [[String]]\ngenBoard x y = take y $ cycle [take x $ repeat \"\"]\n\nmove :: [(Int, Int)] -> [[String]] -> String -> [[String]]\nmove [] board _ = board\nmove moves board color = move (tail moves) newBoard nextColor\n  where mv = head moves\n        nextColor \n          | color == \"x\" = \"o\"\n          | otherwise    = \"x\"\n        newRow = replace (fst mv) color (board !! (snd mv))\n        newBoard = replace (snd mv) newRow board\n        \n        replace n newVal (x:xs)\n          | n == 0 = newVal:xs\n          | otherwise = x:replace (n-1) newVal xs \n\ncheck :: [[String]] -> String\ncheck board\n  | \"o\" `elem` result && \"x\" `elem` result = \"Tie\"\n  | \"o\" `elem` result = \"White wins!\"\n  | \"x\" `elem` result = \"Black wins!\"\n  | otherwise = \"No one wins.\"\n  where chk x = foldl (\\acc a -> if (length $ nub a) == 1 then a !! 0:acc else acc) [] x\n        \n        horzCheck = chk board\n        vertCheck = chk $ transpose board\n        diagonalCheck = chk  \n          [zipWith (!!) board [0..]\n          ,zipWith (!!) board [length board-1,length board-2..]]\n        \n        result = horzCheck ++ vertCheck ++ diagonalCheck\n```\n\n*Running a game in GHCi*\n\n```javascript\n> let g = game [(0,0),(2,1),(0,1),(0,2),(1,1),(2,2),(1,2),(2,0)] (genBoard 3 3) \"x\"\n> check g\n=> \"White wins!\"\n```\n\n**1** - Import a package in haskell, `Data.List` has some useful\nfunctions like `transpose` (I had to make this in JS).\n\n**3** - `genBoard` is a helper function for generating a game board.\nThis will repeat an empty string `x` times and place it into a list. I\nthen take `y` out of an infinite cycle of the previous list, which\nreturns a list of lists with the correct dimensions. I could have also\nused a list comprehension here, but I think this looks cleaner.\n\n**6** - This type signature for the function is kind of interesting. The\n`move` function takes a list of tuples representing the coordinates, a\nlist of lists containing strings (the board), and a string (representing\nthe color). It returns a new board.\n\n**7** - If there are no more moves to make then return the final board.\nThis is how the recursive function will stop.\n\n**8** - Haskell loves recursion, since there are possibly more moves, I\npass all the moves except the the current move back into the `move`\nfunction with the next color and updated board.\n\n**11** - The guard (similar to a switch(true)?) gets the next color, if\nprevious color was black then the next color will be white for example.\n\n**13** - `newRow` is the row with the new piece placed on it from move.\nSince data is immutable in haskell, I can't directly state\n`(board !! y !! x) = color`. Line 14 is the whole board, so once we have\nthe correct row, we then can place it into a new copy of the board. It's\nsort of confusing, but it gets the job done. I could have used\n`Control.Lens` but this method feels a bit cleaner.\n\n**16** - `replace` will go through the list one index at a time until n\nis 0, once n is 0 it will replace the current item under it with the new\nvalue. This function also uses recursion.\n\n**21** - `check` has a guard that will check the `result` for the\ncontents and then determine the appropriate message to display.\n\n**26** - I like to think that `foldl` is kind of like a JS `reduce`. The\nrest of the fold is basically the same thought process as in JS, just\ndifferent syntax.\n\n**31** - Using `zipWith` I can write some fairly clean code to get the\ndiagonals of the board.\n\n[Conclusion](#Conclusion \"Conclusion\")\n---------------------------------------------------\n\nAwesome stuff! It's interesting to see two fairly different languages\nside-by-side. There are definitely some similarities, such as the\n`guard` and `switch` or `foldl` and `reduce`. There are also\ndifferences; Haskell being a statically typed for example. Try to find\nyour own similarities and differences, cheers!","slug":"JS-to-Haskell","published":1,"updated":"2022-06-17T21:10:05.570Z","_id":"cl4ixnmi00000tvwe9gbuhkz6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a><a href=\"#Introduction\" title=\"Introduction\">Introduction</a></h2><p>In this post I will be solving some programming problems with JS and<br>Haskell. This gives a side by side comparison of the two languages and I<br>thought it would be interesting to see the similarities and differences.<br>Let’s get started.</p>\n<h2 id=\"Problem-1-Christmas-Trees\"><a href=\"#Problem-1-Christmas-Trees\" class=\"headerlink\" title=\"Problem 1 (Christmas Trees)\"></a><a href=\"#Problem-1-Christmas-Trees\" title=\"Problem 1 (Christmas Trees)\">Problem 1 (Christmas Trees)</a></h2><h3 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a><a href=\"#Overview\" title=\"Overview\">Overview</a></h3><p>Let’s pretend you are the seller of colorful christmas trees online.<br>Each color has a different price and your job here is to calculate the<br>total cost of christmas tree orders for each customer. Customers can<br>choose the color, lights, and height of each tree.</p>\n<h3 id=\"Details\"><a href=\"#Details\" class=\"headerlink\" title=\"Details\"></a><a href=\"#Details\" title=\"Details\">Details</a></h3><table>\n<thead>\n<tr>\n<th>Tree Color</th>\n<th>Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Red</td>\n<td>$250</td>\n</tr>\n<tr>\n<td>Blue</td>\n<td>$200</td>\n</tr>\n<tr>\n<td>Yellow</td>\n<td>$170</td>\n</tr>\n<tr>\n<td>Green</td>\n<td>$200</td>\n</tr>\n<tr>\n<td>Silver</td>\n<td>$340</td>\n</tr>\n<tr>\n<td>Gold</td>\n<td>$400</td>\n</tr>\n<tr>\n<td>White</td>\n<td>$450</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Light Type</th>\n<th>Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Unlit</td>\n<td>$+0</td>\n</tr>\n<tr>\n<td>White</td>\n<td>$+15</td>\n</tr>\n<tr>\n<td>Multi-color</td>\n<td>$+30</td>\n</tr>\n<tr>\n<td>Single-color</td>\n<td>$+20</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Height</th>\n<th>Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5 feet and under</td>\n<td>$+0</td>\n</tr>\n<tr>\n<td>6 feet</td>\n<td>$+50</td>\n</tr>\n<tr>\n<td>7 feet</td>\n<td>$+100</td>\n</tr>\n<tr>\n<td>8 feet</td>\n<td>$+150</td>\n</tr>\n<tr>\n<td>8+ feet</td>\n<td>$+200</td>\n</tr>\n</tbody></table>\n<p><em>Note: We can take multiple tree orders at a time<br>We are also assuming that the data entered by the user is valid.</em></p>\n<h3 id=\"Javascript-Solution\"><a href=\"#Javascript-Solution\" class=\"headerlink\" title=\"Javascript Solution\"></a><a href=\"#Javascript-Solution\" title=\"Javascript Solution\">Javascript Solution</a></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> trees = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;red&quot;</span>:    <span class=\"number\">250</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;blue&quot;</span>:   <span class=\"number\">200</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;green&quot;</span>:  <span class=\"number\">200</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;yellow&quot;</span>: <span class=\"number\">170</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;silver&quot;</span>: <span class=\"number\">340</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;gold&quot;</span>:   <span class=\"number\">400</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;white&quot;</span>:  <span class=\"number\">450</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> lights = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;unlit&quot;</span>:  <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;white&quot;</span>:  <span class=\"number\">15</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;multi&quot;</span>:  <span class=\"number\">30</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;single&quot;</span>: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">heights</span> = x =&gt; &#123; </span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> (x &lt;= <span class=\"number\">5</span>): <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> (x &lt;= <span class=\"number\">6</span>): <span class=\"keyword\">return</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> (x &lt;= <span class=\"number\">7</span>): <span class=\"keyword\">return</span> <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> (x &lt;= <span class=\"number\">8</span>): <span class=\"keyword\">return</span> <span class=\"number\">150</span></span><br><span class=\"line\">    <span class=\"attr\">default</span>:       <span class=\"keyword\">return</span> <span class=\"number\">200</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">treeOrder</span> = (<span class=\"params\">...orders</span>) =&gt;</span><br><span class=\"line\">    orders.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">t, [tree, type, height]</span>) =&gt;</span></span><br><span class=\"line\">        t += trees[tree] + lights[type] + <span class=\"title function_\">heights</span>(height),<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Here I create 2 constant lookup tables for <code>trees</code> and <code>lights</code> to store<br>the prices. Height is a little more tricky because there are an infinite<br>number of possibilities the number could be (In a real world situation<br>there would probably be only a set number of sizes to choose from, so a<br>lookup table would be possible). I created a simple switch inside the<br><code>heights</code> function to account for the varient in potential input.</p>\n<p>The <code>treeOrder</code> function will take any number of orders and reduce them<br>to a single total value. For each order, I use pattern matching to get<br>the tree color, light type, and height. Using these values, I’m able to<br>get some price amounts which are all added to the total amount.</p>\n<h3 id=\"Haskell-Solution\"><a href=\"#Haskell-Solution\" class=\"headerlink\" title=\"Haskell Solution\"></a><a href=\"#Haskell-Solution\" title=\"Haskell Solution\">Haskell Solution</a></h3><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Control.Monad</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">treeOrder</span> :: [(<span class=\"type\">String</span>, <span class=\"type\">String</span>, <span class=\"type\">Integer</span>)] -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">treeOrder</span> [] = <span class=\"type\">Just</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title\">treeOrder</span> orders = foldM (fmap . (+)) <span class=\"number\">0</span> info</span><br><span class=\"line\">  <span class=\"keyword\">where</span> trees = [(<span class=\"string\">&quot;red&quot;</span>,    <span class=\"number\">250</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;blue&quot;</span>,   <span class=\"number\">200</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;green&quot;</span>,  <span class=\"number\">200</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;yellow&quot;</span>, <span class=\"number\">170</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;silver&quot;</span>, <span class=\"number\">340</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;gold&quot;</span>,   <span class=\"number\">400</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;white&quot;</span>,  <span class=\"number\">450</span>)]</span><br><span class=\"line\">                </span><br><span class=\"line\">        lights = [(<span class=\"string\">&quot;unlit&quot;</span>,  <span class=\"number\">0</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;white&quot;</span>,  <span class=\"number\">15</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;multi&quot;</span>,  <span class=\"number\">30</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;single&quot;</span>, <span class=\"number\">20</span>)]</span><br><span class=\"line\">        </span><br><span class=\"line\">        heights x</span><br><span class=\"line\">          | x &lt;= <span class=\"number\">5</span> = <span class=\"number\">0</span></span><br><span class=\"line\">          | x &lt;= <span class=\"number\">6</span> = <span class=\"number\">50</span></span><br><span class=\"line\">          | x &lt;= <span class=\"number\">7</span> = <span class=\"number\">100</span></span><br><span class=\"line\">          | x &lt;= <span class=\"number\">8</span> = <span class=\"number\">150</span></span><br><span class=\"line\">          | otherwise = <span class=\"number\">200</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        (tree, light, height) = head orders</span><br><span class=\"line\">        </span><br><span class=\"line\">        info = [lookup tree trees</span><br><span class=\"line\">               ,lookup light lights</span><br><span class=\"line\">               ,<span class=\"type\">Just</span> $ heights height</span><br><span class=\"line\">               ,getTree $ tail orders]</span><br></pre></td></tr></table></figure>\n\n<p>With Haskell, I define the lookup tables and height function inside the<br><code>where</code> clause of the <code>treeOrder</code> function. I am then using pattern<br>matching after the height function to get the tree, light, and height<br>values for the current order. <code>info</code> combines all the lookup values and<br>function value into a list. The last element of the info list is how all<br>orders will be added together, using recursion. So, the next orders<br>values will show up as the last element of the <code>info</code> list once it is<br>time to add everything together.</p>\n<p>Once the full list has been calculated, I fold over the values to get a<br>single total value (like reduce).</p>\n<h2 id=\"Problem-2-Tic-Tac-Toe\"><a href=\"#Problem-2-Tic-Tac-Toe\" class=\"headerlink\" title=\"Problem 2 (Tic Tac Toe)\"></a><a href=\"#Problem-2-Tic-Tac-Toe\" title=\"Problem 2 (Tic Tac Toe)\">Problem 2 (Tic Tac Toe)</a></h2><h3 id=\"Overview-1\"><a href=\"#Overview-1\" class=\"headerlink\" title=\"Overview\"></a><a href=\"#Overview-1\" title=\"Overview\">Overview</a></h3><p>Create an interface that users can play a game of tic tac toe on.</p>\n<h3 id=\"Details-1\"><a href=\"#Details-1\" class=\"headerlink\" title=\"Details\"></a><a href=\"#Details-1\" title=\"Details\">Details</a></h3><ul>\n<li>Users should be able to add their color (x or o) to the board.</li>\n<li>When there are 3 of a color in any particular direction, that user<br>wins!</li>\n<li>Function should take a move or multiple moves.</li>\n<li>Input is expected to be valid to avoid adding too much complexity to<br>solutions.</li>\n</ul>\n<h3 id=\"Javascript-Solution-1\"><a href=\"#Javascript-Solution-1\" class=\"headerlink\" title=\"Javascript Solution\"></a><a href=\"#Javascript-Solution-1\" title=\"Javascript Solution\">Javascript Solution</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">transpose</span> = array =&gt;</span><br><span class=\"line\">  array[<span class=\"number\">0</span>].<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">col, i</span>) =&gt;</span> array.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">row</span> =&gt;</span> row[i]));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">move</span> = (<span class=\"params\">board, moves, color</span>) =&gt; </span><br><span class=\"line\">  moves.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">arr, [y,x]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    arr[y][x] = color;</span><br><span class=\"line\">    color = (color == <span class=\"string\">&quot;x&quot;</span>) ? <span class=\"string\">&quot;o&quot;</span> : <span class=\"string\">&quot;x&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125;, board);</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">genBoard</span> = (<span class=\"params\">x, y</span>) =&gt; </span><br><span class=\"line\">  <span class=\"title class_\">Array</span>(x).<span class=\"title function_\">fill</span>().<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Array</span>(y).<span class=\"title function_\">fill</span>(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">check</span> = board =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">getVal</span> = lst =&gt; [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(lst)];</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">chk</span> = x =&gt; (<span class=\"title function_\">getVal</span>(x).<span class=\"property\">length</span> == <span class=\"number\">1</span>) ? <span class=\"title function_\">getVal</span>(x)[<span class=\"number\">0</span>] : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> horzCheck = board.<span class=\"title function_\">map</span>(chk);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vertCheck = <span class=\"title function_\">transpose</span>(board).<span class=\"title function_\">map</span>(chk);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">diagonalCheck</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [d1, d2] = [[],[]];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(x = <span class=\"number\">0</span>; x &lt; board.<span class=\"property\">length</span>; x++) &#123;</span><br><span class=\"line\">      d1.<span class=\"title function_\">push</span>(board[x][x]);</span><br><span class=\"line\">      d2.<span class=\"title function_\">push</span>(board[x][board[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span> - x]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [d1].<span class=\"title function_\">map</span>(chk).<span class=\"title function_\">concat</span>([d2].<span class=\"title function_\">map</span>(chk));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [...horzCheck, ...vertCheck, ...<span class=\"title function_\">diagonalCheck</span>()];</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(result.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;x&quot;</span>) &amp;&amp; result.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;o&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Tie&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(result.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;x&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Black wins!&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(result.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;o&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"string\">&quot;White wins!&quot;</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;No one wins.&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><em>Running a game in console</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">let</span> g = <span class=\"title function_\">move</span>(<span class=\"title function_\">genBoard</span>(<span class=\"number\">3</span>,<span class=\"number\">3</span>),[[<span class=\"number\">0</span>,<span class=\"number\">0</span>],[<span class=\"number\">2</span>,<span class=\"number\">1</span>],[<span class=\"number\">0</span>,<span class=\"number\">1</span>],[<span class=\"number\">0</span>,<span class=\"number\">2</span>],[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">2</span>,<span class=\"number\">0</span>]],<span class=\"string\">&quot;x&quot;</span>)</span><br><span class=\"line\">=&gt; <span class=\"literal\">undefined</span></span><br><span class=\"line\">&gt; <span class=\"title function_\">check</span>(g)</span><br><span class=\"line\">=&gt; <span class=\"string\">&#x27;White wins!&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>I will go over the the code by line numbers to make it a little easier<br>to organize my thoughts.</p>\n<p><strong>1</strong> - To make life easier, I first define a transpose function. It<br>will take an array and swap the columns and rows.</p>\n<p><strong>4</strong> - <code>move</code> takes a board, move, and a color. It adds the moves to<br>the board using a <code>reduce</code>, on each loop in the reduce the color is<br>changed to the opposite color. It might be a little silly to use a<br><code>reduce</code>, but this way I can some avoid extra code.</p>\n<p><strong>11</strong> - <code>genBoard</code> is a helper function for generating an array of<br>arrays that represents the tic tac toe board.</p>\n<p><strong>15</strong> - <code>getVal</code> will return a list of unique values.</p>\n<p><strong>17</strong> - <code>chk</code> is the general checker for sections of the board. If all<br>values in a section are the same then we return that value, else return<br>an empty string.</p>\n<p><strong>19&#x2F;20</strong> - More specific checks for columns and rows of the board<br>(horizontal and vertical).</p>\n<p><strong>22</strong> - Checking diagonals on the board is a little more tricky. By<br>incrementing both x and y index for each pass of a for loop I can get<br>the diagonal from left to right. If y is counting up and x is counting<br>down I can also get the right to left diagonal (line 27).</p>\n<p><strong>35</strong> - Often I omit the curly braces on single line expressions. Just<br>seems cleaner and more readable. Depending on all the checks, the<br><code>check</code> function is now returning the correct message.</p>\n<h3 id=\"Haskell-Solution-1\"><a href=\"#Haskell-Solution-1\" class=\"headerlink\" title=\"Haskell Solution\"></a><a href=\"#Haskell-Solution-1\" title=\"Haskell Solution\">Haskell Solution</a></h3><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Data.List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">genBoard</span> :: <span class=\"type\">Int</span> -&gt; <span class=\"type\">Int</span> -&gt; [[<span class=\"type\">String</span>]]</span><br><span class=\"line\"><span class=\"title\">genBoard</span> x y = take y $ cycle [take x $ repeat <span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">move</span> :: [(<span class=\"type\">Int</span>, <span class=\"type\">Int</span>)] -&gt; [[<span class=\"type\">String</span>]] -&gt; <span class=\"type\">String</span> -&gt; [[<span class=\"type\">String</span>]]</span><br><span class=\"line\"><span class=\"title\">move</span> [] board _ = board</span><br><span class=\"line\"><span class=\"title\">move</span> moves board color = move (tail moves) newBoard nextColor</span><br><span class=\"line\">  <span class=\"keyword\">where</span> mv = head moves</span><br><span class=\"line\">        nextColor </span><br><span class=\"line\">          | color == <span class=\"string\">&quot;x&quot;</span> = <span class=\"string\">&quot;o&quot;</span></span><br><span class=\"line\">          | otherwise    = <span class=\"string\">&quot;x&quot;</span></span><br><span class=\"line\">        newRow = replace (fst mv) color (board !! (snd mv))</span><br><span class=\"line\">        newBoard = replace (snd mv) newRow board</span><br><span class=\"line\">        </span><br><span class=\"line\">        replace n newVal (x:xs)</span><br><span class=\"line\">          | n == <span class=\"number\">0</span> = newVal:xs</span><br><span class=\"line\">          | otherwise = x:replace (n-<span class=\"number\">1</span>) newVal xs </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">check</span> :: [[<span class=\"type\">String</span>]] -&gt; <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"title\">check</span> board</span><br><span class=\"line\">  | <span class=\"string\">&quot;o&quot;</span> `elem` result &amp;&amp; <span class=\"string\">&quot;x&quot;</span> `elem` result = <span class=\"string\">&quot;Tie&quot;</span></span><br><span class=\"line\">  | <span class=\"string\">&quot;o&quot;</span> `elem` result = <span class=\"string\">&quot;White wins!&quot;</span></span><br><span class=\"line\">  | <span class=\"string\">&quot;x&quot;</span> `elem` result = <span class=\"string\">&quot;Black wins!&quot;</span></span><br><span class=\"line\">  | otherwise = <span class=\"string\">&quot;No one wins.&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">where</span> chk x = foldl (\\acc a -&gt; <span class=\"keyword\">if</span> (length $ nub a) == <span class=\"number\">1</span> <span class=\"keyword\">then</span> a !! <span class=\"number\">0</span>:acc <span class=\"keyword\">else</span> acc) [] x</span><br><span class=\"line\">        </span><br><span class=\"line\">        horzCheck = chk board</span><br><span class=\"line\">        vertCheck = chk $ transpose board</span><br><span class=\"line\">        diagonalCheck = chk  </span><br><span class=\"line\">          [zipWith (!!) board [<span class=\"number\">0</span>..]</span><br><span class=\"line\">          ,zipWith (!!) board [length board-<span class=\"number\">1</span>,length board-<span class=\"number\">2</span>..]]</span><br><span class=\"line\">        </span><br><span class=\"line\">        result = horzCheck ++ vertCheck ++ diagonalCheck</span><br></pre></td></tr></table></figure>\n\n<p><em>Running a game in GHCi</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">let</span> g = game [(<span class=\"number\">0</span>,<span class=\"number\">0</span>),(<span class=\"number\">2</span>,<span class=\"number\">1</span>),(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">0</span>,<span class=\"number\">2</span>),(<span class=\"number\">1</span>,<span class=\"number\">1</span>),(<span class=\"number\">2</span>,<span class=\"number\">2</span>),(<span class=\"number\">1</span>,<span class=\"number\">2</span>),(<span class=\"number\">2</span>,<span class=\"number\">0</span>)] (genBoard <span class=\"number\">3</span> <span class=\"number\">3</span>) <span class=\"string\">&quot;x&quot;</span></span><br><span class=\"line\">&gt; check g</span><br><span class=\"line\">=&gt; <span class=\"string\">&quot;White wins!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>1</strong> - Import a package in haskell, <code>Data.List</code> has some useful<br>functions like <code>transpose</code> (I had to make this in JS).</p>\n<p><strong>3</strong> - <code>genBoard</code> is a helper function for generating a game board.<br>This will repeat an empty string <code>x</code> times and place it into a list. I<br>then take <code>y</code> out of an infinite cycle of the previous list, which<br>returns a list of lists with the correct dimensions. I could have also<br>used a list comprehension here, but I think this looks cleaner.</p>\n<p><strong>6</strong> - This type signature for the function is kind of interesting. The<br><code>move</code> function takes a list of tuples representing the coordinates, a<br>list of lists containing strings (the board), and a string (representing<br>the color). It returns a new board.</p>\n<p><strong>7</strong> - If there are no more moves to make then return the final board.<br>This is how the recursive function will stop.</p>\n<p><strong>8</strong> - Haskell loves recursion, since there are possibly more moves, I<br>pass all the moves except the the current move back into the <code>move</code><br>function with the next color and updated board.</p>\n<p><strong>11</strong> - The guard (similar to a switch(true)?) gets the next color, if<br>previous color was black then the next color will be white for example.</p>\n<p><strong>13</strong> - <code>newRow</code> is the row with the new piece placed on it from move.<br>Since data is immutable in haskell, I can’t directly state<br><code>(board !! y !! x) = color</code>. Line 14 is the whole board, so once we have<br>the correct row, we then can place it into a new copy of the board. It’s<br>sort of confusing, but it gets the job done. I could have used<br><code>Control.Lens</code> but this method feels a bit cleaner.</p>\n<p><strong>16</strong> - <code>replace</code> will go through the list one index at a time until n<br>is 0, once n is 0 it will replace the current item under it with the new<br>value. This function also uses recursion.</p>\n<p><strong>21</strong> - <code>check</code> has a guard that will check the <code>result</code> for the<br>contents and then determine the appropriate message to display.</p>\n<p><strong>26</strong> - I like to think that <code>foldl</code> is kind of like a JS <code>reduce</code>. The<br>rest of the fold is basically the same thought process as in JS, just<br>different syntax.</p>\n<p><strong>31</strong> - Using <code>zipWith</code> I can write some fairly clean code to get the<br>diagonals of the board.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a><a href=\"#Conclusion\" title=\"Conclusion\">Conclusion</a></h2><p>Awesome stuff! It’s interesting to see two fairly different languages<br>side-by-side. There are definitely some similarities, such as the<br><code>guard</code> and <code>switch</code> or <code>foldl</code> and <code>reduce</code>. There are also<br>differences; Haskell being a statically typed for example. Try to find<br>your own similarities and differences, cheers!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a><a href=\"#Introduction\" title=\"Introduction\">Introduction</a></h2><p>In this post I will be solving some programming problems with JS and<br>Haskell. This gives a side by side comparison of the two languages and I<br>thought it would be interesting to see the similarities and differences.<br>Let’s get started.</p>\n<h2 id=\"Problem-1-Christmas-Trees\"><a href=\"#Problem-1-Christmas-Trees\" class=\"headerlink\" title=\"Problem 1 (Christmas Trees)\"></a><a href=\"#Problem-1-Christmas-Trees\" title=\"Problem 1 (Christmas Trees)\">Problem 1 (Christmas Trees)</a></h2><h3 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a><a href=\"#Overview\" title=\"Overview\">Overview</a></h3><p>Let’s pretend you are the seller of colorful christmas trees online.<br>Each color has a different price and your job here is to calculate the<br>total cost of christmas tree orders for each customer. Customers can<br>choose the color, lights, and height of each tree.</p>\n<h3 id=\"Details\"><a href=\"#Details\" class=\"headerlink\" title=\"Details\"></a><a href=\"#Details\" title=\"Details\">Details</a></h3><table>\n<thead>\n<tr>\n<th>Tree Color</th>\n<th>Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Red</td>\n<td>$250</td>\n</tr>\n<tr>\n<td>Blue</td>\n<td>$200</td>\n</tr>\n<tr>\n<td>Yellow</td>\n<td>$170</td>\n</tr>\n<tr>\n<td>Green</td>\n<td>$200</td>\n</tr>\n<tr>\n<td>Silver</td>\n<td>$340</td>\n</tr>\n<tr>\n<td>Gold</td>\n<td>$400</td>\n</tr>\n<tr>\n<td>White</td>\n<td>$450</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Light Type</th>\n<th>Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Unlit</td>\n<td>$+0</td>\n</tr>\n<tr>\n<td>White</td>\n<td>$+15</td>\n</tr>\n<tr>\n<td>Multi-color</td>\n<td>$+30</td>\n</tr>\n<tr>\n<td>Single-color</td>\n<td>$+20</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Height</th>\n<th>Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5 feet and under</td>\n<td>$+0</td>\n</tr>\n<tr>\n<td>6 feet</td>\n<td>$+50</td>\n</tr>\n<tr>\n<td>7 feet</td>\n<td>$+100</td>\n</tr>\n<tr>\n<td>8 feet</td>\n<td>$+150</td>\n</tr>\n<tr>\n<td>8+ feet</td>\n<td>$+200</td>\n</tr>\n</tbody></table>\n<p><em>Note: We can take multiple tree orders at a time<br>We are also assuming that the data entered by the user is valid.</em></p>\n<h3 id=\"Javascript-Solution\"><a href=\"#Javascript-Solution\" class=\"headerlink\" title=\"Javascript Solution\"></a><a href=\"#Javascript-Solution\" title=\"Javascript Solution\">Javascript Solution</a></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> trees = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;red&quot;</span>:    <span class=\"number\">250</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;blue&quot;</span>:   <span class=\"number\">200</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;green&quot;</span>:  <span class=\"number\">200</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;yellow&quot;</span>: <span class=\"number\">170</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;silver&quot;</span>: <span class=\"number\">340</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;gold&quot;</span>:   <span class=\"number\">400</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;white&quot;</span>:  <span class=\"number\">450</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> lights = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;unlit&quot;</span>:  <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;white&quot;</span>:  <span class=\"number\">15</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;multi&quot;</span>:  <span class=\"number\">30</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;single&quot;</span>: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">heights</span> = x =&gt; &#123; </span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> (x &lt;= <span class=\"number\">5</span>): <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> (x &lt;= <span class=\"number\">6</span>): <span class=\"keyword\">return</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> (x &lt;= <span class=\"number\">7</span>): <span class=\"keyword\">return</span> <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> (x &lt;= <span class=\"number\">8</span>): <span class=\"keyword\">return</span> <span class=\"number\">150</span></span><br><span class=\"line\">    <span class=\"attr\">default</span>:       <span class=\"keyword\">return</span> <span class=\"number\">200</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">treeOrder</span> = (<span class=\"params\">...orders</span>) =&gt;</span><br><span class=\"line\">    orders.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">t, [tree, type, height]</span>) =&gt;</span></span><br><span class=\"line\">        t += trees[tree] + lights[type] + <span class=\"title function_\">heights</span>(height),<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Here I create 2 constant lookup tables for <code>trees</code> and <code>lights</code> to store<br>the prices. Height is a little more tricky because there are an infinite<br>number of possibilities the number could be (In a real world situation<br>there would probably be only a set number of sizes to choose from, so a<br>lookup table would be possible). I created a simple switch inside the<br><code>heights</code> function to account for the varient in potential input.</p>\n<p>The <code>treeOrder</code> function will take any number of orders and reduce them<br>to a single total value. For each order, I use pattern matching to get<br>the tree color, light type, and height. Using these values, I’m able to<br>get some price amounts which are all added to the total amount.</p>\n<h3 id=\"Haskell-Solution\"><a href=\"#Haskell-Solution\" class=\"headerlink\" title=\"Haskell Solution\"></a><a href=\"#Haskell-Solution\" title=\"Haskell Solution\">Haskell Solution</a></h3><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Control.Monad</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">treeOrder</span> :: [(<span class=\"type\">String</span>, <span class=\"type\">String</span>, <span class=\"type\">Integer</span>)] -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">treeOrder</span> [] = <span class=\"type\">Just</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title\">treeOrder</span> orders = foldM (fmap . (+)) <span class=\"number\">0</span> info</span><br><span class=\"line\">  <span class=\"keyword\">where</span> trees = [(<span class=\"string\">&quot;red&quot;</span>,    <span class=\"number\">250</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;blue&quot;</span>,   <span class=\"number\">200</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;green&quot;</span>,  <span class=\"number\">200</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;yellow&quot;</span>, <span class=\"number\">170</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;silver&quot;</span>, <span class=\"number\">340</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;gold&quot;</span>,   <span class=\"number\">400</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;white&quot;</span>,  <span class=\"number\">450</span>)]</span><br><span class=\"line\">                </span><br><span class=\"line\">        lights = [(<span class=\"string\">&quot;unlit&quot;</span>,  <span class=\"number\">0</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;white&quot;</span>,  <span class=\"number\">15</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;multi&quot;</span>,  <span class=\"number\">30</span>)</span><br><span class=\"line\">                ,(<span class=\"string\">&quot;single&quot;</span>, <span class=\"number\">20</span>)]</span><br><span class=\"line\">        </span><br><span class=\"line\">        heights x</span><br><span class=\"line\">          | x &lt;= <span class=\"number\">5</span> = <span class=\"number\">0</span></span><br><span class=\"line\">          | x &lt;= <span class=\"number\">6</span> = <span class=\"number\">50</span></span><br><span class=\"line\">          | x &lt;= <span class=\"number\">7</span> = <span class=\"number\">100</span></span><br><span class=\"line\">          | x &lt;= <span class=\"number\">8</span> = <span class=\"number\">150</span></span><br><span class=\"line\">          | otherwise = <span class=\"number\">200</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        (tree, light, height) = head orders</span><br><span class=\"line\">        </span><br><span class=\"line\">        info = [lookup tree trees</span><br><span class=\"line\">               ,lookup light lights</span><br><span class=\"line\">               ,<span class=\"type\">Just</span> $ heights height</span><br><span class=\"line\">               ,getTree $ tail orders]</span><br></pre></td></tr></table></figure>\n\n<p>With Haskell, I define the lookup tables and height function inside the<br><code>where</code> clause of the <code>treeOrder</code> function. I am then using pattern<br>matching after the height function to get the tree, light, and height<br>values for the current order. <code>info</code> combines all the lookup values and<br>function value into a list. The last element of the info list is how all<br>orders will be added together, using recursion. So, the next orders<br>values will show up as the last element of the <code>info</code> list once it is<br>time to add everything together.</p>\n<p>Once the full list has been calculated, I fold over the values to get a<br>single total value (like reduce).</p>\n<h2 id=\"Problem-2-Tic-Tac-Toe\"><a href=\"#Problem-2-Tic-Tac-Toe\" class=\"headerlink\" title=\"Problem 2 (Tic Tac Toe)\"></a><a href=\"#Problem-2-Tic-Tac-Toe\" title=\"Problem 2 (Tic Tac Toe)\">Problem 2 (Tic Tac Toe)</a></h2><h3 id=\"Overview-1\"><a href=\"#Overview-1\" class=\"headerlink\" title=\"Overview\"></a><a href=\"#Overview-1\" title=\"Overview\">Overview</a></h3><p>Create an interface that users can play a game of tic tac toe on.</p>\n<h3 id=\"Details-1\"><a href=\"#Details-1\" class=\"headerlink\" title=\"Details\"></a><a href=\"#Details-1\" title=\"Details\">Details</a></h3><ul>\n<li>Users should be able to add their color (x or o) to the board.</li>\n<li>When there are 3 of a color in any particular direction, that user<br>wins!</li>\n<li>Function should take a move or multiple moves.</li>\n<li>Input is expected to be valid to avoid adding too much complexity to<br>solutions.</li>\n</ul>\n<h3 id=\"Javascript-Solution-1\"><a href=\"#Javascript-Solution-1\" class=\"headerlink\" title=\"Javascript Solution\"></a><a href=\"#Javascript-Solution-1\" title=\"Javascript Solution\">Javascript Solution</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">transpose</span> = array =&gt;</span><br><span class=\"line\">  array[<span class=\"number\">0</span>].<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">col, i</span>) =&gt;</span> array.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">row</span> =&gt;</span> row[i]));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">move</span> = (<span class=\"params\">board, moves, color</span>) =&gt; </span><br><span class=\"line\">  moves.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">arr, [y,x]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    arr[y][x] = color;</span><br><span class=\"line\">    color = (color == <span class=\"string\">&quot;x&quot;</span>) ? <span class=\"string\">&quot;o&quot;</span> : <span class=\"string\">&quot;x&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125;, board);</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">genBoard</span> = (<span class=\"params\">x, y</span>) =&gt; </span><br><span class=\"line\">  <span class=\"title class_\">Array</span>(x).<span class=\"title function_\">fill</span>().<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Array</span>(y).<span class=\"title function_\">fill</span>(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">check</span> = board =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">getVal</span> = lst =&gt; [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(lst)];</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">chk</span> = x =&gt; (<span class=\"title function_\">getVal</span>(x).<span class=\"property\">length</span> == <span class=\"number\">1</span>) ? <span class=\"title function_\">getVal</span>(x)[<span class=\"number\">0</span>] : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> horzCheck = board.<span class=\"title function_\">map</span>(chk);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vertCheck = <span class=\"title function_\">transpose</span>(board).<span class=\"title function_\">map</span>(chk);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">diagonalCheck</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [d1, d2] = [[],[]];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(x = <span class=\"number\">0</span>; x &lt; board.<span class=\"property\">length</span>; x++) &#123;</span><br><span class=\"line\">      d1.<span class=\"title function_\">push</span>(board[x][x]);</span><br><span class=\"line\">      d2.<span class=\"title function_\">push</span>(board[x][board[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span> - x]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [d1].<span class=\"title function_\">map</span>(chk).<span class=\"title function_\">concat</span>([d2].<span class=\"title function_\">map</span>(chk));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [...horzCheck, ...vertCheck, ...<span class=\"title function_\">diagonalCheck</span>()];</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(result.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;x&quot;</span>) &amp;&amp; result.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;o&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Tie&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(result.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;x&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Black wins!&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(result.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;o&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"string\">&quot;White wins!&quot;</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;No one wins.&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><em>Running a game in console</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">let</span> g = <span class=\"title function_\">move</span>(<span class=\"title function_\">genBoard</span>(<span class=\"number\">3</span>,<span class=\"number\">3</span>),[[<span class=\"number\">0</span>,<span class=\"number\">0</span>],[<span class=\"number\">2</span>,<span class=\"number\">1</span>],[<span class=\"number\">0</span>,<span class=\"number\">1</span>],[<span class=\"number\">0</span>,<span class=\"number\">2</span>],[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">2</span>,<span class=\"number\">0</span>]],<span class=\"string\">&quot;x&quot;</span>)</span><br><span class=\"line\">=&gt; <span class=\"literal\">undefined</span></span><br><span class=\"line\">&gt; <span class=\"title function_\">check</span>(g)</span><br><span class=\"line\">=&gt; <span class=\"string\">&#x27;White wins!&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>I will go over the the code by line numbers to make it a little easier<br>to organize my thoughts.</p>\n<p><strong>1</strong> - To make life easier, I first define a transpose function. It<br>will take an array and swap the columns and rows.</p>\n<p><strong>4</strong> - <code>move</code> takes a board, move, and a color. It adds the moves to<br>the board using a <code>reduce</code>, on each loop in the reduce the color is<br>changed to the opposite color. It might be a little silly to use a<br><code>reduce</code>, but this way I can some avoid extra code.</p>\n<p><strong>11</strong> - <code>genBoard</code> is a helper function for generating an array of<br>arrays that represents the tic tac toe board.</p>\n<p><strong>15</strong> - <code>getVal</code> will return a list of unique values.</p>\n<p><strong>17</strong> - <code>chk</code> is the general checker for sections of the board. If all<br>values in a section are the same then we return that value, else return<br>an empty string.</p>\n<p><strong>19&#x2F;20</strong> - More specific checks for columns and rows of the board<br>(horizontal and vertical).</p>\n<p><strong>22</strong> - Checking diagonals on the board is a little more tricky. By<br>incrementing both x and y index for each pass of a for loop I can get<br>the diagonal from left to right. If y is counting up and x is counting<br>down I can also get the right to left diagonal (line 27).</p>\n<p><strong>35</strong> - Often I omit the curly braces on single line expressions. Just<br>seems cleaner and more readable. Depending on all the checks, the<br><code>check</code> function is now returning the correct message.</p>\n<h3 id=\"Haskell-Solution-1\"><a href=\"#Haskell-Solution-1\" class=\"headerlink\" title=\"Haskell Solution\"></a><a href=\"#Haskell-Solution-1\" title=\"Haskell Solution\">Haskell Solution</a></h3><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Data.List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">genBoard</span> :: <span class=\"type\">Int</span> -&gt; <span class=\"type\">Int</span> -&gt; [[<span class=\"type\">String</span>]]</span><br><span class=\"line\"><span class=\"title\">genBoard</span> x y = take y $ cycle [take x $ repeat <span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">move</span> :: [(<span class=\"type\">Int</span>, <span class=\"type\">Int</span>)] -&gt; [[<span class=\"type\">String</span>]] -&gt; <span class=\"type\">String</span> -&gt; [[<span class=\"type\">String</span>]]</span><br><span class=\"line\"><span class=\"title\">move</span> [] board _ = board</span><br><span class=\"line\"><span class=\"title\">move</span> moves board color = move (tail moves) newBoard nextColor</span><br><span class=\"line\">  <span class=\"keyword\">where</span> mv = head moves</span><br><span class=\"line\">        nextColor </span><br><span class=\"line\">          | color == <span class=\"string\">&quot;x&quot;</span> = <span class=\"string\">&quot;o&quot;</span></span><br><span class=\"line\">          | otherwise    = <span class=\"string\">&quot;x&quot;</span></span><br><span class=\"line\">        newRow = replace (fst mv) color (board !! (snd mv))</span><br><span class=\"line\">        newBoard = replace (snd mv) newRow board</span><br><span class=\"line\">        </span><br><span class=\"line\">        replace n newVal (x:xs)</span><br><span class=\"line\">          | n == <span class=\"number\">0</span> = newVal:xs</span><br><span class=\"line\">          | otherwise = x:replace (n-<span class=\"number\">1</span>) newVal xs </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">check</span> :: [[<span class=\"type\">String</span>]] -&gt; <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"title\">check</span> board</span><br><span class=\"line\">  | <span class=\"string\">&quot;o&quot;</span> `elem` result &amp;&amp; <span class=\"string\">&quot;x&quot;</span> `elem` result = <span class=\"string\">&quot;Tie&quot;</span></span><br><span class=\"line\">  | <span class=\"string\">&quot;o&quot;</span> `elem` result = <span class=\"string\">&quot;White wins!&quot;</span></span><br><span class=\"line\">  | <span class=\"string\">&quot;x&quot;</span> `elem` result = <span class=\"string\">&quot;Black wins!&quot;</span></span><br><span class=\"line\">  | otherwise = <span class=\"string\">&quot;No one wins.&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">where</span> chk x = foldl (\\acc a -&gt; <span class=\"keyword\">if</span> (length $ nub a) == <span class=\"number\">1</span> <span class=\"keyword\">then</span> a !! <span class=\"number\">0</span>:acc <span class=\"keyword\">else</span> acc) [] x</span><br><span class=\"line\">        </span><br><span class=\"line\">        horzCheck = chk board</span><br><span class=\"line\">        vertCheck = chk $ transpose board</span><br><span class=\"line\">        diagonalCheck = chk  </span><br><span class=\"line\">          [zipWith (!!) board [<span class=\"number\">0</span>..]</span><br><span class=\"line\">          ,zipWith (!!) board [length board-<span class=\"number\">1</span>,length board-<span class=\"number\">2</span>..]]</span><br><span class=\"line\">        </span><br><span class=\"line\">        result = horzCheck ++ vertCheck ++ diagonalCheck</span><br></pre></td></tr></table></figure>\n\n<p><em>Running a game in GHCi</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">let</span> g = game [(<span class=\"number\">0</span>,<span class=\"number\">0</span>),(<span class=\"number\">2</span>,<span class=\"number\">1</span>),(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">0</span>,<span class=\"number\">2</span>),(<span class=\"number\">1</span>,<span class=\"number\">1</span>),(<span class=\"number\">2</span>,<span class=\"number\">2</span>),(<span class=\"number\">1</span>,<span class=\"number\">2</span>),(<span class=\"number\">2</span>,<span class=\"number\">0</span>)] (genBoard <span class=\"number\">3</span> <span class=\"number\">3</span>) <span class=\"string\">&quot;x&quot;</span></span><br><span class=\"line\">&gt; check g</span><br><span class=\"line\">=&gt; <span class=\"string\">&quot;White wins!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>1</strong> - Import a package in haskell, <code>Data.List</code> has some useful<br>functions like <code>transpose</code> (I had to make this in JS).</p>\n<p><strong>3</strong> - <code>genBoard</code> is a helper function for generating a game board.<br>This will repeat an empty string <code>x</code> times and place it into a list. I<br>then take <code>y</code> out of an infinite cycle of the previous list, which<br>returns a list of lists with the correct dimensions. I could have also<br>used a list comprehension here, but I think this looks cleaner.</p>\n<p><strong>6</strong> - This type signature for the function is kind of interesting. The<br><code>move</code> function takes a list of tuples representing the coordinates, a<br>list of lists containing strings (the board), and a string (representing<br>the color). It returns a new board.</p>\n<p><strong>7</strong> - If there are no more moves to make then return the final board.<br>This is how the recursive function will stop.</p>\n<p><strong>8</strong> - Haskell loves recursion, since there are possibly more moves, I<br>pass all the moves except the the current move back into the <code>move</code><br>function with the next color and updated board.</p>\n<p><strong>11</strong> - The guard (similar to a switch(true)?) gets the next color, if<br>previous color was black then the next color will be white for example.</p>\n<p><strong>13</strong> - <code>newRow</code> is the row with the new piece placed on it from move.<br>Since data is immutable in haskell, I can’t directly state<br><code>(board !! y !! x) = color</code>. Line 14 is the whole board, so once we have<br>the correct row, we then can place it into a new copy of the board. It’s<br>sort of confusing, but it gets the job done. I could have used<br><code>Control.Lens</code> but this method feels a bit cleaner.</p>\n<p><strong>16</strong> - <code>replace</code> will go through the list one index at a time until n<br>is 0, once n is 0 it will replace the current item under it with the new<br>value. This function also uses recursion.</p>\n<p><strong>21</strong> - <code>check</code> has a guard that will check the <code>result</code> for the<br>contents and then determine the appropriate message to display.</p>\n<p><strong>26</strong> - I like to think that <code>foldl</code> is kind of like a JS <code>reduce</code>. The<br>rest of the fold is basically the same thought process as in JS, just<br>different syntax.</p>\n<p><strong>31</strong> - Using <code>zipWith</code> I can write some fairly clean code to get the<br>diagonals of the board.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a><a href=\"#Conclusion\" title=\"Conclusion\">Conclusion</a></h2><p>Awesome stuff! It’s interesting to see two fairly different languages<br>side-by-side. There are definitely some similarities, such as the<br><code>guard</code> and <code>switch</code> or <code>foldl</code> and <code>reduce</code>. There are also<br>differences; Haskell being a statically typed for example. Try to find<br>your own similarities and differences, cheers!</p>\n"},{"title":"Haskell Monads","date":"2017-11-13T21:27:44.000Z","_content":"\n[Introduction](#Introduction \"Introduction\")\n---------------------------------------------------------\n\nA few days ago I was introduced to the concept of `monads`. In this post\nI want to go over the concept to solidify it in my memory.\n\nMonads weren't too scary because the concept was slowly built up to with\n`functors` and `monoids` with\n[learnyouahaskell](http://learnyouahaskell.com). I would recommend it to\nanyone who wants to learn a little bit about the Haskell programming\nlanguage. Also, for anyone who doesn't know Haskell, it could be\ndescribed as a pure, lazy functional programming language, you should\ncheck it out.\n\n[Definition](#Definition \"Definition\")\n---------------------------------------------------\n\nMonad is basically a description for a type that follows some set rules.\nIt is also a monoid by default, because a monad follows all the same\nrules a monoid does. As learnyouahaskell described it can also be\ndescribed as a beefed up applicative functor. I found a good\nintroduction to monoids and monads on youtube, try watching this video\ncalled [Don't fear the\nmonad](https://www.youtube.com/watch?v=ZhuHCtR3xq8).\n\nFor reference, here is the Monad type class.\n\n```haskell\nclass Monad m where  \n    return :: a -> m a  \n  \n    (>>=) :: m a -> (a -> m b) -> m b  \n  \n    (>>) :: m a -> m b -> m b  \n    x >> y = x >>= \\_ -> y  \n  \n    fail :: String -> m a  \n    fail msg = error msg\n```\n\n`return` is like `pure` for a functor. It returns the purest form of the\ntype which in this case is a value with a type. `>>=` is used to take\nthe values out of a monad and apply them to a function that takes a\ngeneral value. The result of that function is a monad of the same type.\n`>>` takes two arguments and returns the last argument; however, if the\nfirst argument is `mempty` then it will propagate to the result making\nit `mempty`. For example:\n\n```haskell\nghci> Nothing >> Just 1\nNothing\nghci> Just 1 >> Just 3\nJust 3\n```\n\n[Examples](#Examples \"Examples\")\n---------------------------------------------\n\nThe most basic example of a monad is the `Maybe` type. Here is how\n`Maybe` is implemented as an instance of `Monad`\n\n```haskell\ninstance Monad Maybe where  \n    return x = Just x  \n    Nothing >>= f = Nothing  \n    Just x >>= f  = f x  \n    fail _ = Nothing\n```\n\n`Maybe` on return will return `Just` with the value. If `Nothing` is\npassed to `>>=` then Nothing will propagate to the return of the\nfunction. If `Just` with a value is passed to `>>=` then the value will\nbe taken out of `Just` and passed to the function. `>>` has a default\nimplementation so it's not added to `Maybe`. Here is the default\nimplementation:\n\n```haskell\n(>>) :: (Monad m) => m a -> m b -> m b  \nm >> n = m >>= \\_ -> n\n```\n\n[Using Monad](#Using-Monads \"Using Monads\")\n---------------------------------------------------------\n\nHere's an example using the Maybe monad with `>>=` and a `do` block\nwhich is syntactical sugar for `>>=`\n\n```haskell\nJust 55 >>= (\\x -> Just (5 + x)) -- Just 60\n```\n\nAnd the do block\n\n```haskell\nexample = do\n    x <- Just 55\n    Just (x + 5)\n```\n\nAnd here is a list example (lists are also monads)\n\n```haskell\n[1,2,3,4] >>= \\x -> [(+2), (*3)] >>= \\ch -> return (x, ch x)\n-- [(1,3),(1,3),(2,4),(2,6),(3,5),(3,9),(4,6),(4,12)]\n```\n\n[Conclusion](#Conclusion \"Conclusion\")\n---------------------------------------------------\n\nI'm just getting into monads but I can tell they are a very powerful\ntool. I'm excited to keep exploring Haskell and all of its cool\nfeatures.","source":"_posts/Haskell-Monads.md","raw":"---\ntitle: Haskell Monads\ndate: 2017-11-13 13:27:44\ntags:\n---\n\n[Introduction](#Introduction \"Introduction\")\n---------------------------------------------------------\n\nA few days ago I was introduced to the concept of `monads`. In this post\nI want to go over the concept to solidify it in my memory.\n\nMonads weren't too scary because the concept was slowly built up to with\n`functors` and `monoids` with\n[learnyouahaskell](http://learnyouahaskell.com). I would recommend it to\nanyone who wants to learn a little bit about the Haskell programming\nlanguage. Also, for anyone who doesn't know Haskell, it could be\ndescribed as a pure, lazy functional programming language, you should\ncheck it out.\n\n[Definition](#Definition \"Definition\")\n---------------------------------------------------\n\nMonad is basically a description for a type that follows some set rules.\nIt is also a monoid by default, because a monad follows all the same\nrules a monoid does. As learnyouahaskell described it can also be\ndescribed as a beefed up applicative functor. I found a good\nintroduction to monoids and monads on youtube, try watching this video\ncalled [Don't fear the\nmonad](https://www.youtube.com/watch?v=ZhuHCtR3xq8).\n\nFor reference, here is the Monad type class.\n\n```haskell\nclass Monad m where  \n    return :: a -> m a  \n  \n    (>>=) :: m a -> (a -> m b) -> m b  \n  \n    (>>) :: m a -> m b -> m b  \n    x >> y = x >>= \\_ -> y  \n  \n    fail :: String -> m a  \n    fail msg = error msg\n```\n\n`return` is like `pure` for a functor. It returns the purest form of the\ntype which in this case is a value with a type. `>>=` is used to take\nthe values out of a monad and apply them to a function that takes a\ngeneral value. The result of that function is a monad of the same type.\n`>>` takes two arguments and returns the last argument; however, if the\nfirst argument is `mempty` then it will propagate to the result making\nit `mempty`. For example:\n\n```haskell\nghci> Nothing >> Just 1\nNothing\nghci> Just 1 >> Just 3\nJust 3\n```\n\n[Examples](#Examples \"Examples\")\n---------------------------------------------\n\nThe most basic example of a monad is the `Maybe` type. Here is how\n`Maybe` is implemented as an instance of `Monad`\n\n```haskell\ninstance Monad Maybe where  \n    return x = Just x  \n    Nothing >>= f = Nothing  \n    Just x >>= f  = f x  \n    fail _ = Nothing\n```\n\n`Maybe` on return will return `Just` with the value. If `Nothing` is\npassed to `>>=` then Nothing will propagate to the return of the\nfunction. If `Just` with a value is passed to `>>=` then the value will\nbe taken out of `Just` and passed to the function. `>>` has a default\nimplementation so it's not added to `Maybe`. Here is the default\nimplementation:\n\n```haskell\n(>>) :: (Monad m) => m a -> m b -> m b  \nm >> n = m >>= \\_ -> n\n```\n\n[Using Monad](#Using-Monads \"Using Monads\")\n---------------------------------------------------------\n\nHere's an example using the Maybe monad with `>>=` and a `do` block\nwhich is syntactical sugar for `>>=`\n\n```haskell\nJust 55 >>= (\\x -> Just (5 + x)) -- Just 60\n```\n\nAnd the do block\n\n```haskell\nexample = do\n    x <- Just 55\n    Just (x + 5)\n```\n\nAnd here is a list example (lists are also monads)\n\n```haskell\n[1,2,3,4] >>= \\x -> [(+2), (*3)] >>= \\ch -> return (x, ch x)\n-- [(1,3),(1,3),(2,4),(2,6),(3,5),(3,9),(4,6),(4,12)]\n```\n\n[Conclusion](#Conclusion \"Conclusion\")\n---------------------------------------------------\n\nI'm just getting into monads but I can tell they are a very powerful\ntool. I'm excited to keep exploring Haskell and all of its cool\nfeatures.","slug":"Haskell-Monads","published":1,"updated":"2022-06-17T21:19:07.346Z","_id":"cl4iyeekq0002tvweenzz1yet","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a><a href=\"#Introduction\" title=\"Introduction\">Introduction</a></h2><p>A few days ago I was introduced to the concept of <code>monads</code>. In this post<br>I want to go over the concept to solidify it in my memory.</p>\n<p>Monads weren’t too scary because the concept was slowly built up to with<br><code>functors</code> and <code>monoids</code> with<br><a href=\"http://learnyouahaskell.com/\">learnyouahaskell</a>. I would recommend it to<br>anyone who wants to learn a little bit about the Haskell programming<br>language. Also, for anyone who doesn’t know Haskell, it could be<br>described as a pure, lazy functional programming language, you should<br>check it out.</p>\n<h2 id=\"Definition\"><a href=\"#Definition\" class=\"headerlink\" title=\"Definition\"></a><a href=\"#Definition\" title=\"Definition\">Definition</a></h2><p>Monad is basically a description for a type that follows some set rules.<br>It is also a monoid by default, because a monad follows all the same<br>rules a monoid does. As learnyouahaskell described it can also be<br>described as a beefed up applicative functor. I found a good<br>introduction to monoids and monads on youtube, try watching this video<br>called <a href=\"https://www.youtube.com/watch?v=ZhuHCtR3xq8\">Don’t fear the<br>monad</a>.</p>\n<p>For reference, here is the Monad type class.</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"type\">Monad</span> m <span class=\"keyword\">where</span></span>  </span><br><span class=\"line\">    return :: a -&gt; m a  </span><br><span class=\"line\">  </span><br><span class=\"line\">    (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b  </span><br><span class=\"line\">  </span><br><span class=\"line\">    (&gt;&gt;) :: m a -&gt; m b -&gt; m b  </span><br><span class=\"line\">    x &gt;&gt; y = x &gt;&gt;= \\_ -&gt; y  </span><br><span class=\"line\">  </span><br><span class=\"line\">    fail :: <span class=\"type\">String</span> -&gt; m a  </span><br><span class=\"line\">    fail msg = error msg</span><br></pre></td></tr></table></figure>\n\n<p><code>return</code> is like <code>pure</code> for a functor. It returns the purest form of the<br>type which in this case is a value with a type. <code>&gt;&gt;=</code> is used to take<br>the values out of a monad and apply them to a function that takes a<br>general value. The result of that function is a monad of the same type.<br><code>&gt;&gt;</code> takes two arguments and returns the last argument; however, if the<br>first argument is <code>mempty</code> then it will propagate to the result making<br>it <code>mempty</code>. For example:</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">ghci</span>&gt; <span class=\"type\">Nothing</span> &gt;&gt; <span class=\"type\">Just</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"type\">Nothing</span></span><br><span class=\"line\"><span class=\"title\">ghci</span>&gt; <span class=\"type\">Just</span> <span class=\"number\">1</span> &gt;&gt; <span class=\"type\">Just</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"type\">Just</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a><a href=\"#Examples\" title=\"Examples\">Examples</a></h2><p>The most basic example of a monad is the <code>Maybe</code> type. Here is how<br><code>Maybe</code> is implemented as an instance of <code>Monad</code></p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Monad</span> <span class=\"type\">Maybe</span> <span class=\"keyword\">where</span></span>  </span><br><span class=\"line\">    return x = <span class=\"type\">Just</span> x  </span><br><span class=\"line\">    <span class=\"type\">Nothing</span> &gt;&gt;= f = <span class=\"type\">Nothing</span>  </span><br><span class=\"line\">    <span class=\"type\">Just</span> x &gt;&gt;= f  = f x  </span><br><span class=\"line\">    fail _ = <span class=\"type\">Nothing</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Maybe</code> on return will return <code>Just</code> with the value. If <code>Nothing</code> is<br>passed to <code>&gt;&gt;=</code> then Nothing will propagate to the return of the<br>function. If <code>Just</code> with a value is passed to <code>&gt;&gt;=</code> then the value will<br>be taken out of <code>Just</code> and passed to the function. <code>&gt;&gt;</code> has a default<br>implementation so it’s not added to <code>Maybe</code>. Here is the default<br>implementation:</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&gt;&gt;) :: (<span class=\"type\">Monad</span> m) =&gt; m a -&gt; m b -&gt; m b  </span><br><span class=\"line\"><span class=\"title\">m</span> &gt;&gt; n = m &gt;&gt;= \\_ -&gt; n</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Using-Monad\"><a href=\"#Using-Monad\" class=\"headerlink\" title=\"Using Monad\"></a><a href=\"#Using-Monads\" title=\"Using Monads\">Using Monad</a></h2><p>Here’s an example using the Maybe monad with <code>&gt;&gt;=</code> and a <code>do</code> block<br>which is syntactical sugar for <code>&gt;&gt;=</code></p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Just</span> <span class=\"number\">55</span> &gt;&gt;= (\\x -&gt; <span class=\"type\">Just</span> (<span class=\"number\">5</span> + x)) <span class=\"comment\">-- Just 60</span></span><br></pre></td></tr></table></figure>\n\n<p>And the do block</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">example</span> = <span class=\"keyword\">do</span></span><br><span class=\"line\">    x &lt;- <span class=\"type\">Just</span> <span class=\"number\">55</span></span><br><span class=\"line\">    <span class=\"type\">Just</span> (x + <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<p>And here is a list example (lists are also monads)</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>] &gt;&gt;= \\x -&gt; [(+<span class=\"number\">2</span>), (*<span class=\"number\">3</span>)] &gt;&gt;= \\ch -&gt; return (x, ch x)</span><br><span class=\"line\"><span class=\"comment\">-- [(1,3),(1,3),(2,4),(2,6),(3,5),(3,9),(4,6),(4,12)]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a><a href=\"#Conclusion\" title=\"Conclusion\">Conclusion</a></h2><p>I’m just getting into monads but I can tell they are a very powerful<br>tool. I’m excited to keep exploring Haskell and all of its cool<br>features.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a><a href=\"#Introduction\" title=\"Introduction\">Introduction</a></h2><p>A few days ago I was introduced to the concept of <code>monads</code>. In this post<br>I want to go over the concept to solidify it in my memory.</p>\n<p>Monads weren’t too scary because the concept was slowly built up to with<br><code>functors</code> and <code>monoids</code> with<br><a href=\"http://learnyouahaskell.com/\">learnyouahaskell</a>. I would recommend it to<br>anyone who wants to learn a little bit about the Haskell programming<br>language. Also, for anyone who doesn’t know Haskell, it could be<br>described as a pure, lazy functional programming language, you should<br>check it out.</p>\n<h2 id=\"Definition\"><a href=\"#Definition\" class=\"headerlink\" title=\"Definition\"></a><a href=\"#Definition\" title=\"Definition\">Definition</a></h2><p>Monad is basically a description for a type that follows some set rules.<br>It is also a monoid by default, because a monad follows all the same<br>rules a monoid does. As learnyouahaskell described it can also be<br>described as a beefed up applicative functor. I found a good<br>introduction to monoids and monads on youtube, try watching this video<br>called <a href=\"https://www.youtube.com/watch?v=ZhuHCtR3xq8\">Don’t fear the<br>monad</a>.</p>\n<p>For reference, here is the Monad type class.</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"type\">Monad</span> m <span class=\"keyword\">where</span></span>  </span><br><span class=\"line\">    return :: a -&gt; m a  </span><br><span class=\"line\">  </span><br><span class=\"line\">    (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b  </span><br><span class=\"line\">  </span><br><span class=\"line\">    (&gt;&gt;) :: m a -&gt; m b -&gt; m b  </span><br><span class=\"line\">    x &gt;&gt; y = x &gt;&gt;= \\_ -&gt; y  </span><br><span class=\"line\">  </span><br><span class=\"line\">    fail :: <span class=\"type\">String</span> -&gt; m a  </span><br><span class=\"line\">    fail msg = error msg</span><br></pre></td></tr></table></figure>\n\n<p><code>return</code> is like <code>pure</code> for a functor. It returns the purest form of the<br>type which in this case is a value with a type. <code>&gt;&gt;=</code> is used to take<br>the values out of a monad and apply them to a function that takes a<br>general value. The result of that function is a monad of the same type.<br><code>&gt;&gt;</code> takes two arguments and returns the last argument; however, if the<br>first argument is <code>mempty</code> then it will propagate to the result making<br>it <code>mempty</code>. For example:</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">ghci</span>&gt; <span class=\"type\">Nothing</span> &gt;&gt; <span class=\"type\">Just</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"type\">Nothing</span></span><br><span class=\"line\"><span class=\"title\">ghci</span>&gt; <span class=\"type\">Just</span> <span class=\"number\">1</span> &gt;&gt; <span class=\"type\">Just</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"type\">Just</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a><a href=\"#Examples\" title=\"Examples\">Examples</a></h2><p>The most basic example of a monad is the <code>Maybe</code> type. Here is how<br><code>Maybe</code> is implemented as an instance of <code>Monad</code></p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Monad</span> <span class=\"type\">Maybe</span> <span class=\"keyword\">where</span></span>  </span><br><span class=\"line\">    return x = <span class=\"type\">Just</span> x  </span><br><span class=\"line\">    <span class=\"type\">Nothing</span> &gt;&gt;= f = <span class=\"type\">Nothing</span>  </span><br><span class=\"line\">    <span class=\"type\">Just</span> x &gt;&gt;= f  = f x  </span><br><span class=\"line\">    fail _ = <span class=\"type\">Nothing</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Maybe</code> on return will return <code>Just</code> with the value. If <code>Nothing</code> is<br>passed to <code>&gt;&gt;=</code> then Nothing will propagate to the return of the<br>function. If <code>Just</code> with a value is passed to <code>&gt;&gt;=</code> then the value will<br>be taken out of <code>Just</code> and passed to the function. <code>&gt;&gt;</code> has a default<br>implementation so it’s not added to <code>Maybe</code>. Here is the default<br>implementation:</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&gt;&gt;) :: (<span class=\"type\">Monad</span> m) =&gt; m a -&gt; m b -&gt; m b  </span><br><span class=\"line\"><span class=\"title\">m</span> &gt;&gt; n = m &gt;&gt;= \\_ -&gt; n</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Using-Monad\"><a href=\"#Using-Monad\" class=\"headerlink\" title=\"Using Monad\"></a><a href=\"#Using-Monads\" title=\"Using Monads\">Using Monad</a></h2><p>Here’s an example using the Maybe monad with <code>&gt;&gt;=</code> and a <code>do</code> block<br>which is syntactical sugar for <code>&gt;&gt;=</code></p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Just</span> <span class=\"number\">55</span> &gt;&gt;= (\\x -&gt; <span class=\"type\">Just</span> (<span class=\"number\">5</span> + x)) <span class=\"comment\">-- Just 60</span></span><br></pre></td></tr></table></figure>\n\n<p>And the do block</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">example</span> = <span class=\"keyword\">do</span></span><br><span class=\"line\">    x &lt;- <span class=\"type\">Just</span> <span class=\"number\">55</span></span><br><span class=\"line\">    <span class=\"type\">Just</span> (x + <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<p>And here is a list example (lists are also monads)</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>] &gt;&gt;= \\x -&gt; [(+<span class=\"number\">2</span>), (*<span class=\"number\">3</span>)] &gt;&gt;= \\ch -&gt; return (x, ch x)</span><br><span class=\"line\"><span class=\"comment\">-- [(1,3),(1,3),(2,4),(2,6),(3,5),(3,9),(4,6),(4,12)]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a><a href=\"#Conclusion\" title=\"Conclusion\">Conclusion</a></h2><p>I’m just getting into monads but I can tell they are a very powerful<br>tool. I’m excited to keep exploring Haskell and all of its cool<br>features.</p>\n"},{"title":"Intro to Lambda Calculus","date":"2017-11-20T21:27:44.000Z","_content":"\n[Overview](#Overview \"Overview\")\n---------------------------------------------\n\n*Note: This is a work in progress.*\n\nFor the past couple of days I've been learning about lambda calculus. I\nthought I would review what I've learned as well as offer a few\nresources were helpful for me.\n\n### [Description](#Description \"Description\")\n\nAccording to wikipedia, \"[Lambda calculus](https://en.wikipedia.org/wiki/Lambda_calculus) (also written\nas λ-calculus) is a formal system in mathematical logic for expressing\ncomputation based on function abstraction and application using variable\nbinding and substitution\". It was created by [Alonzo Church](https://en.wikipedia.org/wiki/Alonzo_Church) who also happened\nto have [Alan Turing](https://en.wikipedia.org/wiki/Alan_Turing) as a\nstudent.\n\n### [Resources](#Resources \"Resources\")\n\nFor learning a little about these topics, I found [glebec's lambda-talk repo](https://github.com/glebec/lambda-talk) to be extremely useful and\ninteresting. I also found this [computerphile video on lambda calculus](https://www.youtube.com/watch?v=eis11j_iGMs) to be a good\nintroduction as well.\n\n[Details](#Details \"Details\")\n------------------------------------------\n\n### [Basics](#Basics \"Basics\")\n\nThe most basic function in lambda calculus is identity. Like so:\n\n```js\nI = a => a // λa.a  <- lambda calculus notation\nI(1) // 1\n```\n\nIn Haskell it's built in to the language as `id`.\nThere are also various other functions named after birds because Haskell\ncurry was apparently an avid bird watcher and the functions were named\nin honor of that.\nHere are some of the notes that I took on glebec's lambda-talk.\n\n```js\nparse = n => (\n  n = n.name,\n  (n == \"K\")  ? true  :\n  (n == \"KI\") ? false : false\n) // parsing to unpack meaning from the lambda calculus.\n\nI = a => a        // λa.a  - Idiot        - Identity\nK = a => b => a   // λab.a - Kestrel      - first, const\nKI = a => b => b  // λab.b - Kite         - second\nM = f => f(f)     // λf.ff - Mockingbird  - self-application\n\n// Combinator - functions with no free variables. e.g. λabc.ab , not λa.b\n\nC = f => a => b => f(b)(a) // λfab.fba    - flip arguments\n\n// Church encodings - Booleans/Logic\n\nconst T = K  // true behaves like Kestrel.\nconst F = KI // false behaves like Kite.\nnot = f => f(F)(T) // Kestral will pick the fst, Kite the snd\nand = f => q => f(q)(F)\nor  = f => q => f(T)(q)\nbeq = f => q => f(q)(not(q)) \n\n// e.g.\n```\n\n### [SKI combinator calculus](#SKI-combinator-calculus \"SKI combinator calculus\")\n\nThere are also particular groups of combinators that are turing complete\nby themselves.\nOne such grouping is called SKI combinator calculus. The last two\ncombinators `K` and `I` I already mentioned. Crazy enough, SKI\ncombinator calculus can be shortened to just SK combinator calculus,\nbecause `SKK` is equivalent to `I`. Notes below on more details.\\\n\n```js\nS = a => b => c => a(c)(b(c)) // λabc.ac(bc) - Starling\nS(K)(K)(2) // 2\n```\n\nI also found a good video on the topic: [SKI cardboard calculus](https://www.youtube.com/watch?v=fZQMmgElRMI)\nAs a fun side note: look at this [Hello World using SKI combinator calculus](https://gist.github.com/shangaslammi/3438688). (Haskell is\nrequired to run the program)\n\n### [Church Numbers](#Church-Numbers \"Church Numbers\")\n\nChurch numbers are a way of representing numeric values in lambda\ncalculus. Take a look at this code for example:\n\n```js\nnum = x => x(y => y + 1)(0) // For converting function to number.\n\nn0 = f => a => a // Exactly like the Kite. Zero is false in lambda calculus.\nn1 = f => a => f(a) // Exactly like Identity, except it is refered to as I* (Identity once removed).\nn2 = f => a => f(f(a)) // An additional f is added.\nn3 = f => a => f(f(f(a))) // And so on..\nn4 = f => a => f(n3(f)(a))\n\n// e.g.\nnum(n4) // 4\nnum(n3) // 3\n```\n\nYou can also do things such as addition on church numbers to get new\nnumbers. But first, it is helpful to define a succession function that\nwill take a number and return that number incremented by one. Here are\nmy notes on Church Numbers:\n\n```js\nsucc = f => a => f(a)\n```","source":"_posts/Intro-to-Lambda-Calculus.md","raw":"---\ntitle: Intro to Lambda Calculus\ndate: 2017-11-20 13:27:44\ntags:\n---\n\n[Overview](#Overview \"Overview\")\n---------------------------------------------\n\n*Note: This is a work in progress.*\n\nFor the past couple of days I've been learning about lambda calculus. I\nthought I would review what I've learned as well as offer a few\nresources were helpful for me.\n\n### [Description](#Description \"Description\")\n\nAccording to wikipedia, \"[Lambda calculus](https://en.wikipedia.org/wiki/Lambda_calculus) (also written\nas λ-calculus) is a formal system in mathematical logic for expressing\ncomputation based on function abstraction and application using variable\nbinding and substitution\". It was created by [Alonzo Church](https://en.wikipedia.org/wiki/Alonzo_Church) who also happened\nto have [Alan Turing](https://en.wikipedia.org/wiki/Alan_Turing) as a\nstudent.\n\n### [Resources](#Resources \"Resources\")\n\nFor learning a little about these topics, I found [glebec's lambda-talk repo](https://github.com/glebec/lambda-talk) to be extremely useful and\ninteresting. I also found this [computerphile video on lambda calculus](https://www.youtube.com/watch?v=eis11j_iGMs) to be a good\nintroduction as well.\n\n[Details](#Details \"Details\")\n------------------------------------------\n\n### [Basics](#Basics \"Basics\")\n\nThe most basic function in lambda calculus is identity. Like so:\n\n```js\nI = a => a // λa.a  <- lambda calculus notation\nI(1) // 1\n```\n\nIn Haskell it's built in to the language as `id`.\nThere are also various other functions named after birds because Haskell\ncurry was apparently an avid bird watcher and the functions were named\nin honor of that.\nHere are some of the notes that I took on glebec's lambda-talk.\n\n```js\nparse = n => (\n  n = n.name,\n  (n == \"K\")  ? true  :\n  (n == \"KI\") ? false : false\n) // parsing to unpack meaning from the lambda calculus.\n\nI = a => a        // λa.a  - Idiot        - Identity\nK = a => b => a   // λab.a - Kestrel      - first, const\nKI = a => b => b  // λab.b - Kite         - second\nM = f => f(f)     // λf.ff - Mockingbird  - self-application\n\n// Combinator - functions with no free variables. e.g. λabc.ab , not λa.b\n\nC = f => a => b => f(b)(a) // λfab.fba    - flip arguments\n\n// Church encodings - Booleans/Logic\n\nconst T = K  // true behaves like Kestrel.\nconst F = KI // false behaves like Kite.\nnot = f => f(F)(T) // Kestral will pick the fst, Kite the snd\nand = f => q => f(q)(F)\nor  = f => q => f(T)(q)\nbeq = f => q => f(q)(not(q)) \n\n// e.g.\n```\n\n### [SKI combinator calculus](#SKI-combinator-calculus \"SKI combinator calculus\")\n\nThere are also particular groups of combinators that are turing complete\nby themselves.\nOne such grouping is called SKI combinator calculus. The last two\ncombinators `K` and `I` I already mentioned. Crazy enough, SKI\ncombinator calculus can be shortened to just SK combinator calculus,\nbecause `SKK` is equivalent to `I`. Notes below on more details.\\\n\n```js\nS = a => b => c => a(c)(b(c)) // λabc.ac(bc) - Starling\nS(K)(K)(2) // 2\n```\n\nI also found a good video on the topic: [SKI cardboard calculus](https://www.youtube.com/watch?v=fZQMmgElRMI)\nAs a fun side note: look at this [Hello World using SKI combinator calculus](https://gist.github.com/shangaslammi/3438688). (Haskell is\nrequired to run the program)\n\n### [Church Numbers](#Church-Numbers \"Church Numbers\")\n\nChurch numbers are a way of representing numeric values in lambda\ncalculus. Take a look at this code for example:\n\n```js\nnum = x => x(y => y + 1)(0) // For converting function to number.\n\nn0 = f => a => a // Exactly like the Kite. Zero is false in lambda calculus.\nn1 = f => a => f(a) // Exactly like Identity, except it is refered to as I* (Identity once removed).\nn2 = f => a => f(f(a)) // An additional f is added.\nn3 = f => a => f(f(f(a))) // And so on..\nn4 = f => a => f(n3(f)(a))\n\n// e.g.\nnum(n4) // 4\nnum(n3) // 3\n```\n\nYou can also do things such as addition on church numbers to get new\nnumbers. But first, it is helpful to define a succession function that\nwill take a number and return that number incremented by one. Here are\nmy notes on Church Numbers:\n\n```js\nsucc = f => a => f(a)\n```","slug":"Intro-to-Lambda-Calculus","published":1,"updated":"2022-06-17T21:34:49.295Z","_id":"cl4iyu1cd0000vywehurb5zol","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a><a href=\"#Overview\" title=\"Overview\">Overview</a></h2><p><em>Note: This is a work in progress.</em></p>\n<p>For the past couple of days I’ve been learning about lambda calculus. I<br>thought I would review what I’ve learned as well as offer a few<br>resources were helpful for me.</p>\n<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a><a href=\"#Description\" title=\"Description\">Description</a></h3><p>According to wikipedia, “<a href=\"https://en.wikipedia.org/wiki/Lambda_calculus\">Lambda calculus</a> (also written<br>as λ-calculus) is a formal system in mathematical logic for expressing<br>computation based on function abstraction and application using variable<br>binding and substitution”. It was created by <a href=\"https://en.wikipedia.org/wiki/Alonzo_Church\">Alonzo Church</a> who also happened<br>to have <a href=\"https://en.wikipedia.org/wiki/Alan_Turing\">Alan Turing</a> as a<br>student.</p>\n<h3 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a><a href=\"#Resources\" title=\"Resources\">Resources</a></h3><p>For learning a little about these topics, I found <a href=\"https://github.com/glebec/lambda-talk\">glebec’s lambda-talk repo</a> to be extremely useful and<br>interesting. I also found this <a href=\"https://www.youtube.com/watch?v=eis11j_iGMs\">computerphile video on lambda calculus</a> to be a good<br>introduction as well.</p>\n<h2 id=\"Details\"><a href=\"#Details\" class=\"headerlink\" title=\"Details\"></a><a href=\"#Details\" title=\"Details\">Details</a></h2><h3 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a><a href=\"#Basics\" title=\"Basics\">Basics</a></h3><p>The most basic function in lambda calculus is identity. Like so:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> a <span class=\"comment\">// λa.a  &lt;- lambda calculus notation</span></span><br><span class=\"line\"><span class=\"title function_\">I</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>In Haskell it’s built in to the language as <code>id</code>.<br>There are also various other functions named after birds because Haskell<br>curry was apparently an avid bird watcher and the functions were named<br>in honor of that.<br>Here are some of the notes that I took on glebec’s lambda-talk.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parse = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> (</span><br><span class=\"line\">  n = n.<span class=\"property\">name</span>,</span><br><span class=\"line\">  (n == <span class=\"string\">&quot;K&quot;</span>)  ? <span class=\"literal\">true</span>  :</span><br><span class=\"line\">  (n == <span class=\"string\">&quot;KI&quot;</span>) ? <span class=\"literal\">false</span> : <span class=\"literal\">false</span></span><br><span class=\"line\">) <span class=\"comment\">// parsing to unpack meaning from the lambda calculus.</span></span><br><span class=\"line\"></span><br><span class=\"line\">I = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> a        <span class=\"comment\">// λa.a  - Idiot        - Identity</span></span><br><span class=\"line\">K = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"function\"><span class=\"params\">b</span> =&gt;</span> a   <span class=\"comment\">// λab.a - Kestrel      - first, const</span></span><br><span class=\"line\"><span class=\"variable constant_\">KI</span> = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"function\"><span class=\"params\">b</span> =&gt;</span> b  <span class=\"comment\">// λab.b - Kite         - second</span></span><br><span class=\"line\">M = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"title function_\">f</span>(f)     <span class=\"comment\">// λf.ff - Mockingbird  - self-application</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Combinator - functions with no free variables. e.g. λabc.ab , not λa.b</span></span><br><span class=\"line\"></span><br><span class=\"line\">C = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"function\"><span class=\"params\">b</span> =&gt;</span> <span class=\"title function_\">f</span>(b)(a) <span class=\"comment\">// λfab.fba    - flip arguments</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Church encodings - Booleans/Logic</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> T = K  <span class=\"comment\">// true behaves like Kestrel.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> F = <span class=\"variable constant_\">KI</span> <span class=\"comment\">// false behaves like Kite.</span></span><br><span class=\"line\">not = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"title function_\">f</span>(F)(T) <span class=\"comment\">// Kestral will pick the fst, Kite the snd</span></span><br><span class=\"line\">and = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">q</span> =&gt;</span> <span class=\"title function_\">f</span>(q)(F)</span><br><span class=\"line\">or  = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">q</span> =&gt;</span> <span class=\"title function_\">f</span>(T)(q)</span><br><span class=\"line\">beq = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">q</span> =&gt;</span> <span class=\"title function_\">f</span>(q)(<span class=\"title function_\">not</span>(q)) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// e.g.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SKI-combinator-calculus\"><a href=\"#SKI-combinator-calculus\" class=\"headerlink\" title=\"SKI combinator calculus\"></a><a href=\"#SKI-combinator-calculus\" title=\"SKI combinator calculus\">SKI combinator calculus</a></h3><p>There are also particular groups of combinators that are turing complete<br>by themselves.<br>One such grouping is called SKI combinator calculus. The last two<br>combinators <code>K</code> and <code>I</code> I already mentioned. Crazy enough, SKI<br>combinator calculus can be shortened to just SK combinator calculus,<br>because <code>SKK</code> is equivalent to <code>I</code>. Notes below on more details.\\</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"function\"><span class=\"params\">b</span> =&gt;</span> <span class=\"function\"><span class=\"params\">c</span> =&gt;</span> <span class=\"title function_\">a</span>(c)(<span class=\"title function_\">b</span>(c)) <span class=\"comment\">// λabc.ac(bc) - Starling</span></span><br><span class=\"line\"><span class=\"title function_\">S</span>(K)(K)(<span class=\"number\">2</span>) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>I also found a good video on the topic: <a href=\"https://www.youtube.com/watch?v=fZQMmgElRMI\">SKI cardboard calculus</a><br>As a fun side note: look at this <a href=\"https://gist.github.com/shangaslammi/3438688\">Hello World using SKI combinator calculus</a>. (Haskell is<br>required to run the program)</p>\n<h3 id=\"Church-Numbers\"><a href=\"#Church-Numbers\" class=\"headerlink\" title=\"Church Numbers\"></a><a href=\"#Church-Numbers\" title=\"Church Numbers\">Church Numbers</a></h3><p>Church numbers are a way of representing numeric values in lambda<br>calculus. Take a look at this code for example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"title function_\">x</span>(<span class=\"function\"><span class=\"params\">y</span> =&gt;</span> y + <span class=\"number\">1</span>)(<span class=\"number\">0</span>) <span class=\"comment\">// For converting function to number.</span></span><br><span class=\"line\"></span><br><span class=\"line\">n0 = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> a <span class=\"comment\">// Exactly like the Kite. Zero is false in lambda calculus.</span></span><br><span class=\"line\">n1 = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"title function_\">f</span>(a) <span class=\"comment\">// Exactly like Identity, except it is refered to as I* (Identity once removed).</span></span><br><span class=\"line\">n2 = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"title function_\">f</span>(<span class=\"title function_\">f</span>(a)) <span class=\"comment\">// An additional f is added.</span></span><br><span class=\"line\">n3 = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"title function_\">f</span>(<span class=\"title function_\">f</span>(<span class=\"title function_\">f</span>(a))) <span class=\"comment\">// And so on..</span></span><br><span class=\"line\">n4 = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"title function_\">f</span>(<span class=\"title function_\">n3</span>(f)(a))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// e.g.</span></span><br><span class=\"line\"><span class=\"title function_\">num</span>(n4) <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"title function_\">num</span>(n3) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>You can also do things such as addition on church numbers to get new<br>numbers. But first, it is helpful to define a succession function that<br>will take a number and return that number incremented by one. Here are<br>my notes on Church Numbers:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">succ = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"title function_\">f</span>(a)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a><a href=\"#Overview\" title=\"Overview\">Overview</a></h2><p><em>Note: This is a work in progress.</em></p>\n<p>For the past couple of days I’ve been learning about lambda calculus. I<br>thought I would review what I’ve learned as well as offer a few<br>resources were helpful for me.</p>\n<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a><a href=\"#Description\" title=\"Description\">Description</a></h3><p>According to wikipedia, “<a href=\"https://en.wikipedia.org/wiki/Lambda_calculus\">Lambda calculus</a> (also written<br>as λ-calculus) is a formal system in mathematical logic for expressing<br>computation based on function abstraction and application using variable<br>binding and substitution”. It was created by <a href=\"https://en.wikipedia.org/wiki/Alonzo_Church\">Alonzo Church</a> who also happened<br>to have <a href=\"https://en.wikipedia.org/wiki/Alan_Turing\">Alan Turing</a> as a<br>student.</p>\n<h3 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a><a href=\"#Resources\" title=\"Resources\">Resources</a></h3><p>For learning a little about these topics, I found <a href=\"https://github.com/glebec/lambda-talk\">glebec’s lambda-talk repo</a> to be extremely useful and<br>interesting. I also found this <a href=\"https://www.youtube.com/watch?v=eis11j_iGMs\">computerphile video on lambda calculus</a> to be a good<br>introduction as well.</p>\n<h2 id=\"Details\"><a href=\"#Details\" class=\"headerlink\" title=\"Details\"></a><a href=\"#Details\" title=\"Details\">Details</a></h2><h3 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a><a href=\"#Basics\" title=\"Basics\">Basics</a></h3><p>The most basic function in lambda calculus is identity. Like so:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> a <span class=\"comment\">// λa.a  &lt;- lambda calculus notation</span></span><br><span class=\"line\"><span class=\"title function_\">I</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>In Haskell it’s built in to the language as <code>id</code>.<br>There are also various other functions named after birds because Haskell<br>curry was apparently an avid bird watcher and the functions were named<br>in honor of that.<br>Here are some of the notes that I took on glebec’s lambda-talk.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parse = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> (</span><br><span class=\"line\">  n = n.<span class=\"property\">name</span>,</span><br><span class=\"line\">  (n == <span class=\"string\">&quot;K&quot;</span>)  ? <span class=\"literal\">true</span>  :</span><br><span class=\"line\">  (n == <span class=\"string\">&quot;KI&quot;</span>) ? <span class=\"literal\">false</span> : <span class=\"literal\">false</span></span><br><span class=\"line\">) <span class=\"comment\">// parsing to unpack meaning from the lambda calculus.</span></span><br><span class=\"line\"></span><br><span class=\"line\">I = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> a        <span class=\"comment\">// λa.a  - Idiot        - Identity</span></span><br><span class=\"line\">K = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"function\"><span class=\"params\">b</span> =&gt;</span> a   <span class=\"comment\">// λab.a - Kestrel      - first, const</span></span><br><span class=\"line\"><span class=\"variable constant_\">KI</span> = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"function\"><span class=\"params\">b</span> =&gt;</span> b  <span class=\"comment\">// λab.b - Kite         - second</span></span><br><span class=\"line\">M = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"title function_\">f</span>(f)     <span class=\"comment\">// λf.ff - Mockingbird  - self-application</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Combinator - functions with no free variables. e.g. λabc.ab , not λa.b</span></span><br><span class=\"line\"></span><br><span class=\"line\">C = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"function\"><span class=\"params\">b</span> =&gt;</span> <span class=\"title function_\">f</span>(b)(a) <span class=\"comment\">// λfab.fba    - flip arguments</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Church encodings - Booleans/Logic</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> T = K  <span class=\"comment\">// true behaves like Kestrel.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> F = <span class=\"variable constant_\">KI</span> <span class=\"comment\">// false behaves like Kite.</span></span><br><span class=\"line\">not = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"title function_\">f</span>(F)(T) <span class=\"comment\">// Kestral will pick the fst, Kite the snd</span></span><br><span class=\"line\">and = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">q</span> =&gt;</span> <span class=\"title function_\">f</span>(q)(F)</span><br><span class=\"line\">or  = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">q</span> =&gt;</span> <span class=\"title function_\">f</span>(T)(q)</span><br><span class=\"line\">beq = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">q</span> =&gt;</span> <span class=\"title function_\">f</span>(q)(<span class=\"title function_\">not</span>(q)) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// e.g.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SKI-combinator-calculus\"><a href=\"#SKI-combinator-calculus\" class=\"headerlink\" title=\"SKI combinator calculus\"></a><a href=\"#SKI-combinator-calculus\" title=\"SKI combinator calculus\">SKI combinator calculus</a></h3><p>There are also particular groups of combinators that are turing complete<br>by themselves.<br>One such grouping is called SKI combinator calculus. The last two<br>combinators <code>K</code> and <code>I</code> I already mentioned. Crazy enough, SKI<br>combinator calculus can be shortened to just SK combinator calculus,<br>because <code>SKK</code> is equivalent to <code>I</code>. Notes below on more details.\\</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"function\"><span class=\"params\">b</span> =&gt;</span> <span class=\"function\"><span class=\"params\">c</span> =&gt;</span> <span class=\"title function_\">a</span>(c)(<span class=\"title function_\">b</span>(c)) <span class=\"comment\">// λabc.ac(bc) - Starling</span></span><br><span class=\"line\"><span class=\"title function_\">S</span>(K)(K)(<span class=\"number\">2</span>) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>I also found a good video on the topic: <a href=\"https://www.youtube.com/watch?v=fZQMmgElRMI\">SKI cardboard calculus</a><br>As a fun side note: look at this <a href=\"https://gist.github.com/shangaslammi/3438688\">Hello World using SKI combinator calculus</a>. (Haskell is<br>required to run the program)</p>\n<h3 id=\"Church-Numbers\"><a href=\"#Church-Numbers\" class=\"headerlink\" title=\"Church Numbers\"></a><a href=\"#Church-Numbers\" title=\"Church Numbers\">Church Numbers</a></h3><p>Church numbers are a way of representing numeric values in lambda<br>calculus. Take a look at this code for example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"title function_\">x</span>(<span class=\"function\"><span class=\"params\">y</span> =&gt;</span> y + <span class=\"number\">1</span>)(<span class=\"number\">0</span>) <span class=\"comment\">// For converting function to number.</span></span><br><span class=\"line\"></span><br><span class=\"line\">n0 = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> a <span class=\"comment\">// Exactly like the Kite. Zero is false in lambda calculus.</span></span><br><span class=\"line\">n1 = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"title function_\">f</span>(a) <span class=\"comment\">// Exactly like Identity, except it is refered to as I* (Identity once removed).</span></span><br><span class=\"line\">n2 = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"title function_\">f</span>(<span class=\"title function_\">f</span>(a)) <span class=\"comment\">// An additional f is added.</span></span><br><span class=\"line\">n3 = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"title function_\">f</span>(<span class=\"title function_\">f</span>(<span class=\"title function_\">f</span>(a))) <span class=\"comment\">// And so on..</span></span><br><span class=\"line\">n4 = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"title function_\">f</span>(<span class=\"title function_\">n3</span>(f)(a))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// e.g.</span></span><br><span class=\"line\"><span class=\"title function_\">num</span>(n4) <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"title function_\">num</span>(n3) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>You can also do things such as addition on church numbers to get new<br>numbers. But first, it is helpful to define a succession function that<br>will take a number and return that number incremented by one. Here are<br>my notes on Church Numbers:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">succ = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"title function_\">f</span>(a)</span><br></pre></td></tr></table></figure>"},{"title":"Minesweeper in VB","date":"2017-11-13T21:27:44.000Z","_content":"\n![Minesweeper](Minesweeper-in-VB/minesweeper-background.jpg)\n\n[Overview](#Overview \"Overview\")\n---------------------------------------------\n\nMy final project for CS133B is to make a fully functional minesweeper\nclone. The class uses Visual Basic, so that will be the language I am\ngoing to make the game in.\n\nI've already gotten a start on the game, and I will make some updates to\nthis post including the things I've learned and updated with the\nproject.\n\n[Progress](#Progress \"Progress\")\n---------------------------------------------\n\n### [2017-11-13](#2017-11-13 \"2017-11-13\")\n\nToday I finished setting up code so the buttons form rows on loading the\nform. I've never really dynamically added elements to a form up to this\npoint so it was a learning experience. Here is a little bit of code\n(simplified) to do that:\n\n```vb\nConst GAME_SIZE = 9 ' How many rows and colums, TODO: Add x and y for game size.\n\nDim btn As Button\nDim intCols As Integer\nDim intRows As Integer\nDim intButtonSize = 20\n\nFor intCols = 0 To GAME_SIZE - 1 \n    For intRows = 0 To GAME_SIZE - 1\n        btn = New Button()\n        btn.Top = intCols * intButtonSize\n        btn.Left = intRows * intButtonSize\n        btn.Size = New Size(intButtonSize, intButtonSize)\n        \n        Me.Controls.Add(btnCell)\n    Next\nNext\n```\n\nAnother thing I learned about was a ternary-esque syntax in VB. For\nexample:\n\n```vb\nDim x As String = \"Hello\"\nDim result As String\n\nresult = If(x = \"Hello\", \"World\", \"Hello\") ' ternary like syntax in VB\n```\n\nNow that I'm sure that this is a feasible project, I'm going to need to\ntype out the plans before I go any further. Such as an IPO chart,\npseudocode, and a controls chart.","source":"_posts/Minesweeper-in-VB.md","raw":"---\ntitle: Minesweeper in VB\ndate: 2017-11-13 13:27:44\ntags:\n---\n\n![Minesweeper](Minesweeper-in-VB/minesweeper-background.jpg)\n\n[Overview](#Overview \"Overview\")\n---------------------------------------------\n\nMy final project for CS133B is to make a fully functional minesweeper\nclone. The class uses Visual Basic, so that will be the language I am\ngoing to make the game in.\n\nI've already gotten a start on the game, and I will make some updates to\nthis post including the things I've learned and updated with the\nproject.\n\n[Progress](#Progress \"Progress\")\n---------------------------------------------\n\n### [2017-11-13](#2017-11-13 \"2017-11-13\")\n\nToday I finished setting up code so the buttons form rows on loading the\nform. I've never really dynamically added elements to a form up to this\npoint so it was a learning experience. Here is a little bit of code\n(simplified) to do that:\n\n```vb\nConst GAME_SIZE = 9 ' How many rows and colums, TODO: Add x and y for game size.\n\nDim btn As Button\nDim intCols As Integer\nDim intRows As Integer\nDim intButtonSize = 20\n\nFor intCols = 0 To GAME_SIZE - 1 \n    For intRows = 0 To GAME_SIZE - 1\n        btn = New Button()\n        btn.Top = intCols * intButtonSize\n        btn.Left = intRows * intButtonSize\n        btn.Size = New Size(intButtonSize, intButtonSize)\n        \n        Me.Controls.Add(btnCell)\n    Next\nNext\n```\n\nAnother thing I learned about was a ternary-esque syntax in VB. For\nexample:\n\n```vb\nDim x As String = \"Hello\"\nDim result As String\n\nresult = If(x = \"Hello\", \"World\", \"Hello\") ' ternary like syntax in VB\n```\n\nNow that I'm sure that this is a feasible project, I'm going to need to\ntype out the plans before I go any further. Such as an IPO chart,\npseudocode, and a controls chart.","slug":"Minesweeper-in-VB","published":1,"updated":"2022-06-17T22:00:27.315Z","_id":"cl4iz7eq70000z6wect6eeso5","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/2017/11/13/Minesweeper-in-VB/minesweeper-background.jpg\" alt=\"Minesweeper\"></p>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a><a href=\"#Overview\" title=\"Overview\">Overview</a></h2><p>My final project for CS133B is to make a fully functional minesweeper<br>clone. The class uses Visual Basic, so that will be the language I am<br>going to make the game in.</p>\n<p>I’ve already gotten a start on the game, and I will make some updates to<br>this post including the things I’ve learned and updated with the<br>project.</p>\n<h2 id=\"Progress\"><a href=\"#Progress\" class=\"headerlink\" title=\"Progress\"></a><a href=\"#Progress\" title=\"Progress\">Progress</a></h2><h3 id=\"2017-11-13\"><a href=\"#2017-11-13\" class=\"headerlink\" title=\"2017-11-13\"></a><a href=\"#2017-11-13\" title=\"2017-11-13\">2017-11-13</a></h3><p>Today I finished setting up code so the buttons form rows on loading the<br>form. I’ve never really dynamically added elements to a form up to this<br>point so it was a learning experience. Here is a little bit of code<br>(simplified) to do that:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Const</span> GAME_SIZE = <span class=\"number\">9</span> <span class=\"comment\">&#x27; How many rows and colums, <span class=\"doctag\">TODO:</span> Add x and y for game size.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Dim</span> btn <span class=\"keyword\">As</span> Button</span><br><span class=\"line\"><span class=\"keyword\">Dim</span> intCols <span class=\"keyword\">As</span> <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"keyword\">Dim</span> intRows <span class=\"keyword\">As</span> <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"keyword\">Dim</span> intButtonSize = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">For</span> intCols = <span class=\"number\">0</span> <span class=\"keyword\">To</span> GAME_SIZE - <span class=\"number\">1</span> </span><br><span class=\"line\">    <span class=\"keyword\">For</span> intRows = <span class=\"number\">0</span> <span class=\"keyword\">To</span> GAME_SIZE - <span class=\"number\">1</span></span><br><span class=\"line\">        btn = <span class=\"built_in\">New</span> Button()</span><br><span class=\"line\">        btn.Top = intCols * intButtonSize</span><br><span class=\"line\">        btn.Left = intRows * intButtonSize</span><br><span class=\"line\">        btn.Size = <span class=\"built_in\">New</span> Size(intButtonSize, intButtonSize)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">Me</span>.Controls.Add(btnCell)</span><br><span class=\"line\">    <span class=\"keyword\">Next</span></span><br><span class=\"line\"><span class=\"keyword\">Next</span></span><br></pre></td></tr></table></figure>\n\n<p>Another thing I learned about was a ternary-esque syntax in VB. For<br>example:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> x <span class=\"keyword\">As</span> <span class=\"type\">String</span> = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">Dim</span> result <span class=\"keyword\">As</span> <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = <span class=\"keyword\">If</span>(x = <span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot;World&quot;</span>, <span class=\"string\">&quot;Hello&quot;</span>) <span class=\"comment\">&#x27; ternary like syntax in VB</span></span><br></pre></td></tr></table></figure>\n\n<p>Now that I’m sure that this is a feasible project, I’m going to need to<br>type out the plans before I go any further. Such as an IPO chart,<br>pseudocode, and a controls chart.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2017/11/13/Minesweeper-in-VB/minesweeper-background.jpg\" alt=\"Minesweeper\"></p>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a><a href=\"#Overview\" title=\"Overview\">Overview</a></h2><p>My final project for CS133B is to make a fully functional minesweeper<br>clone. The class uses Visual Basic, so that will be the language I am<br>going to make the game in.</p>\n<p>I’ve already gotten a start on the game, and I will make some updates to<br>this post including the things I’ve learned and updated with the<br>project.</p>\n<h2 id=\"Progress\"><a href=\"#Progress\" class=\"headerlink\" title=\"Progress\"></a><a href=\"#Progress\" title=\"Progress\">Progress</a></h2><h3 id=\"2017-11-13\"><a href=\"#2017-11-13\" class=\"headerlink\" title=\"2017-11-13\"></a><a href=\"#2017-11-13\" title=\"2017-11-13\">2017-11-13</a></h3><p>Today I finished setting up code so the buttons form rows on loading the<br>form. I’ve never really dynamically added elements to a form up to this<br>point so it was a learning experience. Here is a little bit of code<br>(simplified) to do that:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Const</span> GAME_SIZE = <span class=\"number\">9</span> <span class=\"comment\">&#x27; How many rows and colums, <span class=\"doctag\">TODO:</span> Add x and y for game size.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Dim</span> btn <span class=\"keyword\">As</span> Button</span><br><span class=\"line\"><span class=\"keyword\">Dim</span> intCols <span class=\"keyword\">As</span> <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"keyword\">Dim</span> intRows <span class=\"keyword\">As</span> <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"keyword\">Dim</span> intButtonSize = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">For</span> intCols = <span class=\"number\">0</span> <span class=\"keyword\">To</span> GAME_SIZE - <span class=\"number\">1</span> </span><br><span class=\"line\">    <span class=\"keyword\">For</span> intRows = <span class=\"number\">0</span> <span class=\"keyword\">To</span> GAME_SIZE - <span class=\"number\">1</span></span><br><span class=\"line\">        btn = <span class=\"built_in\">New</span> Button()</span><br><span class=\"line\">        btn.Top = intCols * intButtonSize</span><br><span class=\"line\">        btn.Left = intRows * intButtonSize</span><br><span class=\"line\">        btn.Size = <span class=\"built_in\">New</span> Size(intButtonSize, intButtonSize)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">Me</span>.Controls.Add(btnCell)</span><br><span class=\"line\">    <span class=\"keyword\">Next</span></span><br><span class=\"line\"><span class=\"keyword\">Next</span></span><br></pre></td></tr></table></figure>\n\n<p>Another thing I learned about was a ternary-esque syntax in VB. For<br>example:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> x <span class=\"keyword\">As</span> <span class=\"type\">String</span> = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">Dim</span> result <span class=\"keyword\">As</span> <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = <span class=\"keyword\">If</span>(x = <span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot;World&quot;</span>, <span class=\"string\">&quot;Hello&quot;</span>) <span class=\"comment\">&#x27; ternary like syntax in VB</span></span><br></pre></td></tr></table></figure>\n\n<p>Now that I’m sure that this is a feasible project, I’m going to need to<br>type out the plans before I go any further. Such as an IPO chart,<br>pseudocode, and a controls chart.</p>\n"}],"PostAsset":[{"_id":"source/_posts/Minesweeper-in-VB/minesweeper-background.jpg","slug":"minesweeper-background.jpg","post":"cl4iz7eq70000z6wect6eeso5","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}